"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toJSON = exports.link = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _groups = require("../groups");

var _url = require("../../utils/url");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var getLinkAttrs = function getLinkAttrs(attribute) {
  return function (domNode) {
    var dom = domNode;
    var href = dom.getAttribute(attribute) || '';
    var attrs = {
      __confluenceMetadata: dom.hasAttribute('__confluenceMetadata') ? JSON.parse(dom.getAttribute('__confluenceMetadata') || '') : undefined
    };

    if ((0, _url.isSafeUrl)(href)) {
      attrs.href = (0, _url.normalizeUrl)(href);
    } else {
      return false;
    }

    return attrs;
  };
};

var link = {
  excludes: "".concat(_groups.LINK),
  // ED-5844 No multiple links in media node
  group: _groups.LINK,
  attrs: {
    href: {},
    __confluenceMetadata: {
      default: null
    }
  },
  inclusive: false,
  parseDOM: [{
    tag: '[data-block-link]',
    getAttrs: getLinkAttrs('data-block-link'),
    contentElement: function contentElement(node) {
      var clone = node.cloneNode(true);
      clone.removeAttribute('data-block-link');
      clone.setAttribute('data-skip-paste', 'true');
      var wrapper = document.createElement('div');
      wrapper.appendChild(clone);
      return wrapper;
    }
  }, {
    tag: 'a[href]',
    getAttrs: getLinkAttrs('href')
  }],
  toDOM: function toDOM(node, isInline) {
    var _objectSpread2;

    var attrs = Object.keys(node.attrs).reduce(function (attrs, key) {
      if (key === '__confluenceMetadata') {
        if (node.attrs[key] !== null) {
          attrs[key] = JSON.stringify(node.attrs[key]);
        }
      } else if (key === 'href') {
        attrs[key] = (0, _url.isSafeUrl)(node.attrs[key]) ? node.attrs[key] : undefined;
      } else {
        attrs[key] = node.attrs[key];
      }

      return attrs;
    }, {});

    if (isInline) {
      return ['a', attrs];
    }

    return ['a', _objectSpread(_objectSpread({}, attrs), {}, (_objectSpread2 = {}, (0, _defineProperty2.default)(_objectSpread2, 'data-block-link', 'true'), (0, _defineProperty2.default)(_objectSpread2, "class", 'blockLink'), _objectSpread2)), 0];
  }
};
exports.link = link;
var OPTIONAL_ATTRS = ['title', 'id', 'collection', 'occurrenceKey', '__confluenceMetadata'];

var toJSON = function toJSON(mark) {
  return {
    type: mark.type.name,
    attrs: Object.keys(mark.attrs).reduce(function (attrs, key) {
      if (OPTIONAL_ATTRS.indexOf(key) === -1 || mark.attrs[key] !== null) {
        attrs[key] = mark.attrs[key];
      }

      return attrs;
    }, {})
  };
};

exports.toJSON = toJSON;