"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toJSON = exports.dataConsumer = void 0;

var _parseDOM = require("../../utils/parseDOM");

var parseDataConsumer = function parseDataConsumer(maybeValue) {
  var sources = (0, _parseDOM.isDOMElement)(maybeValue) && maybeValue.getAttribute('data-sources');

  try {
    return sources ? {
      sources: JSON.parse(sources)
    } : false;
  } catch (_unused) {
    return false;
  }
};

var dataConsumer = {
  attrs: {
    sources: {
      default: []
    }
  },
  parseDOM: [{
    tag: '[data-mark-type="dataConsumer"]',
    getAttrs: function getAttrs(maybeValue) {
      return parseDataConsumer(maybeValue);
    }
  }],
  toDOM: function toDOM(mark, inline) {
    var wrapperStyle = inline ? 'span' : 'div';
    return [wrapperStyle, {
      'data-mark-type': 'dataConsumer',
      'data-sources': JSON.stringify(mark.attrs.sources)
    }];
  }
};
/**
 * We want to ensure any "invalid ADF" doesn't get serialised, but the entire
 * mark itself is not valid without a non-empty `sources`.
 *
 * We _almost could_ simply return `null` if sources length is < 0 & would fit
 * the type signature of prosemirror-model's `fragment` but not `mark`'s toJSON.
 *
 * So we'll leave any extra transformation checks in
 * `editor-json-transformer`(?)
 */

exports.dataConsumer = dataConsumer;

var toJSON = function toJSON(mark) {
  // // Remove intemediary state if we don't have any sources on data consumer
  // if (mark.attrs?.sources?.length < 1) {
  //   return null;
  // }
  return {
    type: mark.type.name,
    attrs: Object.keys(mark.attrs).filter(function (key) {
      return key === 'sources' && mark.attrs[key].length > 0 && mark.attrs[key] !== null;
    }).reduce(function (acc, key) {
      acc[key] = mark.attrs[key];
      return acc;
    }, {})
  };
};

exports.toJSON = toJSON;