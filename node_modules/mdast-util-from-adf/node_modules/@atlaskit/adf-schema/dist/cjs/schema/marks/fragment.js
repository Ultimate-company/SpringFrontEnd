"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toJSON = exports.fragment = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _parseDOM = require("../../utils/parseDOM");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var parseFragment = function parseFragment(maybeValue) {
  var _maybeValue$getAttrib;

  if (!(0, _parseDOM.isDOMElement)(maybeValue)) {
    return false;
  }

  var name = (_maybeValue$getAttrib = maybeValue.getAttribute('data-name')) !== null && _maybeValue$getAttrib !== void 0 ? _maybeValue$getAttrib : undefined;
  var localId = maybeValue.getAttribute('data-localId');

  if (!localId) {
    return false;
  }

  return {
    localId: localId,
    name: name
  };
};

var fragment = {
  inclusive: false,
  excludes: '',
  attrs: {
    localId: {
      default: ''
    },
    name: {
      default: null
    }
  },
  parseDOM: [{
    tag: '[data-mark-type="fragment"]',
    getAttrs: function getAttrs(maybeValue) {
      return parseFragment(maybeValue);
    }
  }],
  toDOM: function toDOM(mark, inline) {
    var wrapperStyle = inline ? 'span' : 'div';
    return [wrapperStyle, {
      'data-mark-type': 'fragment',
      'data-name': mark.attrs.name,
      'data-localId': mark.attrs.localId
    }];
  }
};
exports.fragment = fragment;

var toJSON = function toJSON(mark) {
  return {
    type: mark.type.name,
    attrs: _objectSpread({
      localId: mark.attrs.localId
    }, mark.attrs.name ? {
      name: mark.attrs.name
    } : {})
  };
};

exports.toJSON = toJSON;