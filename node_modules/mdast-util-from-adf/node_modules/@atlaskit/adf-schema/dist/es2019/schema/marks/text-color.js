import { hexToEditorTextPaletteColor } from '@atlaskit/editor-palette';
import { COLOR } from '../groups';
import { rgbToHex, N0, N80, P50, P300, P500, T75, T300, T500, G75, G300, G500, R75, R300, R500, Y75, Y200, Y400, B75, B100, B500 } from '../../utils/colors';
const colorArrayPalette = [// default row
// [N800, default],
[N80, 'Light gray'], [P300, 'Purple'], [T300, 'Teal'], [G300, 'Green'], [R300, 'Red'], [Y400, 'Orange']]; // used for extended palette in text color picker

const colorArrayPaletteExtended = [// default row - first color is added programatically
// [N800, 'Squid ink'], // default dark gray
[B500, 'Dark blue'], // Chore coat
[T500, 'Dark teal'], // Shabby chic
[G500, 'Dark green'], // Keen green
[Y400, 'Orange'], // Cheezy blasters
[R500, 'Dark red'], // Dragon's blood
[P500, 'Dark purple'], // Prince
// row 2
[N80, 'Light gray'], // Spooky ghost
[B100, 'Blue'], // Arvo breeze
[T300, 'Teal'], // Tamarama
[G300, 'Green'], // Fine pine
[Y200, 'Yellow'], // Pub mix
[R300, 'Red'], // Poppy surprise
[P300, 'Purple'], // Da' juice
// row 3
[N0, 'White'], [B75, 'Light blue'], // Schwag
[T75, 'Light teal'], // Arctic chill
[G75, 'Light green'], // Mintie
[Y75, 'Light yellow'], // Dandelion whisper
[R75, 'Light red'], // Bondi sunburn
[P50, 'Light purple'] // Lavender secret
]; // @see https://product-fabric.atlassian.net/wiki/spaces/E/pages/55979455/Colour+picker+decisions#Colourpickerdecisions-Visualdesigndecisions

export const colorPalette = new Map();
export const colorPaletteExtended = new Map();
colorArrayPalette.forEach(([color, label]) => colorPalette.set(color.toLowerCase(), label));
colorArrayPaletteExtended.forEach(([color, label]) => colorPaletteExtended.set(color.toLowerCase(), label));
export const textColor = {
  attrs: {
    color: {}
  },
  inclusive: true,
  group: COLOR,
  parseDOM: [{
    style: 'color',
    getAttrs: maybeValue => {
      const value = maybeValue;
      let hexColor;

      if (value.match(/^rgb/i)) {
        hexColor = rgbToHex(value);
      } else if (value[0] === '#') {
        hexColor = value.toLowerCase();
      } // else handle other colour formats


      return hexColor && (colorPalette.has(hexColor) || colorPaletteExtended.has(hexColor)) ? {
        color: hexColor
      } : false;
    }
  }, // This rule ensures when loading from a renderer or editor where the
  // presented text color does not match the stored hex color -- that the
  // text color is preserved.
  //
  // This was initially introduced to ensure text-color marks were not lost
  // when text-color was used inside a link, and is now also used to support
  // where the hex color stored in ADF is used as an ID for a design system
  // token (and based on theme mode -- the presented color will change).
  {
    tag: '.fabric-text-color-mark',
    getAttrs: maybeElement => {
      if (!(maybeElement instanceof HTMLElement)) {
        return false;
      }

      const hexColor = maybeElement.dataset.textCustomColor;
      return hexColor && (colorPalette.has(hexColor) || colorPaletteExtended.has(hexColor)) ? {
        color: hexColor
      } : false;
    }
  }],

  toDOM(mark) {
    // Note -- while there is no way to create custom colors using default tooling
    // the editor does supported ad hoc color values -- and there may be content
    // which has been migrated or created via apis which use such values.
    const paletteColorValue = hexToEditorTextPaletteColor(mark.attrs.color) || mark.attrs.color;
    return ['span', {
      class: 'fabric-text-color-mark',
      style: `--custom-palette-color: ${paletteColorValue}`,
      ['data-text-custom-color']: mark.attrs.color
    }];
  }

};