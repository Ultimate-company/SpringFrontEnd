import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

export var PanelType;

(function (PanelType) {
  PanelType["INFO"] = "info";
  PanelType["NOTE"] = "note";
  PanelType["TIP"] = "tip";
  PanelType["WARNING"] = "warning";
  PanelType["ERROR"] = "error";
  PanelType["SUCCESS"] = "success";
  PanelType["CUSTOM"] = "custom";
})(PanelType || (PanelType = {}));

var getDefaultAttrs = function getDefaultAttrs() {
  var attrs = {
    panelType: {
      default: 'info'
    },
    panelIcon: {
      default: null
    },
    panelIconId: {
      default: null
    },
    panelIconText: {
      default: null
    },
    panelColor: {
      default: null
    }
  };
  return attrs;
};

var getDomAttrs = function getDomAttrs(nodeAttrs) {
  var attrs = {
    'data-panel-type': nodeAttrs.panelType,
    'data-panel-icon': nodeAttrs.panelIcon,
    'data-panel-icon-id': nodeAttrs.panelIconId,
    'data-panel-icon-text': nodeAttrs.panelIconText,
    'data-panel-color': nodeAttrs.panelColor
  };
  return attrs;
};

var getParseDOMAttrs = function getParseDOMAttrs(allowCustomPanel, dom) {
  var parseDOMAttrs = {
    panelType: dom.getAttribute('data-panel-type')
  };

  if (allowCustomPanel) {
    parseDOMAttrs = _objectSpread(_objectSpread({}, parseDOMAttrs), {}, {
      panelIcon: dom.getAttribute('data-panel-icon'),
      panelIconId: dom.getAttribute('data-panel-icon-id'),
      panelIconText: dom.getAttribute('data-panel-icon-text'),
      panelColor: dom.getAttribute('data-panel-color')
    });
  } else {
    parseDOMAttrs.panelType = parseDOMAttrs.panelType === PanelType.CUSTOM ? PanelType.INFO : parseDOMAttrs.panelType;
  }

  return parseDOMAttrs;
};

export var panel = function panel(allowCustomPanel) {
  var panelNodeSpec = {
    group: 'block',
    content: '(paragraph | heading | bulletList | orderedList | blockCard | unsupportedBlock)+',
    marks: 'unsupportedMark unsupportedNodeAttribute',
    attrs: getDefaultAttrs(),
    parseDOM: [{
      tag: 'div[data-panel-type]',
      getAttrs: function getAttrs(dom) {
        return getParseDOMAttrs(allowCustomPanel, dom);
      }
    }],
    toDOM: function toDOM(node) {
      var attrs = getDomAttrs(node.attrs);
      var contentAttrs = {
        'data-panel-content': 'true'
      };
      return ['div', attrs, ['div', contentAttrs, 0]];
    }
  };
  return panelNodeSpec;
};