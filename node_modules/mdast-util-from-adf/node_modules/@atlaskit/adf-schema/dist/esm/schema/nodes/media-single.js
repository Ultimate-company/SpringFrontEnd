import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * @name mediaSingle_node
 * @additionalProperties true
 */

/**
 * @additionalProperties true
 */

/**
 * @name mediaSingle_full_node
 */

/**
 * @additionalProperties true
 */

/**
 * @name mediaSingle_caption_node
 */
export var defaultAttrs = {
  width: {
    default: null
  },
  // null makes small images to have original size by default
  layout: {
    default: 'center'
  }
};
export var mediaSingle = {
  inline: false,
  group: 'block',
  selectable: true,
  atom: true,
  content: 'media|unsupportedBlock+|media unsupportedBlock+',
  attrs: defaultAttrs,
  marks: 'unsupportedMark unsupportedNodeAttribute link',
  parseDOM: [{
    tag: 'div[data-node-type="mediaSingle"]',
    getAttrs: function getAttrs(dom) {
      return {
        layout: dom.getAttribute('data-layout') || 'center',
        width: Number(dom.getAttribute('data-width')) || null
      };
    }
  }],
  toDOM: function toDOM(node) {
    var _node$attrs = node.attrs,
        layout = _node$attrs.layout,
        width = _node$attrs.width;
    var attrs = {
      'data-node-type': 'mediaSingle',
      'data-layout': layout,
      'data-width': ''
    };

    if (width) {
      attrs['data-width'] = isFinite(width) && Math.floor(width) === width ? width : width.toFixed(2);
    }

    return ['div', attrs, 0];
  }
};
export var mediaSingleWithCaption = _objectSpread(_objectSpread({}, mediaSingle), {}, {
  atom: false,
  content: 'media|unsupportedBlock+|media (caption|unsupportedBlock) unsupportedBlock*'
});
export var toJSON = function toJSON(node) {
  return {
    attrs: Object.keys(node.attrs).reduce(function (obj, key) {
      if (node.attrs[key] !== null) {
        obj[key] = node.attrs[key];
      }

      return obj;
    }, {})
  };
};