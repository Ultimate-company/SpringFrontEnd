import {
  require_MapCache,
  require_Stack,
  require_Symbol,
  require_Uint8Array,
  require_eq,
  require_getAllKeys,
  require_getTag,
  require_isArray,
  require_isBuffer,
  require_isObjectLike,
  require_isTypedArray
} from "./chunk-3QGFTB65.js";
import {
  _classCallCheck,
  _createClass,
  _defineProperty,
  _slicedToArray,
  getBooleanFF,
  memoizeOne
} from "./chunk-GYHOKJMO.js";
import {
  css_color_names_default,
  css_color_names_exports,
  require_linkify_it
} from "./chunk-ORZRZFYN.js";
import {
  Fragment,
  Schema
} from "./chunk-AGEANN4K.js";
import {
  _typeof
} from "./chunk-LHMD4SLY.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-A7R72HEX.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-WXXH56N5.js";

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module) {
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    module.exports = arraySome;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module) {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module.exports = cacheHas;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    module.exports = equalArrays;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module) {
    function mapToArray(map2) {
      var index = -1, result = Array(map2.size);
      map2.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    module.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module) {
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    module.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var Uint8Array = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module.exports = equalByTag;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module.exports = equalObjects;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module.exports = baseIsEqual;
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual2(value, other) {
      return baseIsEqual(value, other);
    }
    module.exports = isEqual2;
  }
});

// node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
init_objectWithoutPropertiesLoose();
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}

// node_modules/@atlaskit/editor-json-transformer/dist/esm/index.js
var import_isEqual = __toESM(require_isEqual());

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/index.js
var nodes_exports = {};
__export(nodes_exports, {
  PanelType: () => PanelType,
  blockCard: () => blockCard2,
  blockquote: () => blockquote2,
  blockquoteWithList: () => blockquoteWithList,
  blockquoteWithNestedCodeblockOrMedia: () => blockquoteWithNestedCodeblockOrMedia,
  bodiedExtension: () => bodiedExtension2,
  bulletList: () => bulletList2,
  bulletListSelector: () => bulletListSelector,
  caption: () => caption2,
  codeBlock: () => codeBlock2,
  codeBlockToJSON: () => toJSON3,
  confluenceJiraIssue: () => confluenceJiraIssue2,
  confluenceUnsupportedBlock: () => confluenceUnsupportedBlock2,
  confluenceUnsupportedInline: () => confluenceUnsupportedInline2,
  copyPrivateMediaAttributes: () => copyPrivateAttributes,
  date: () => date2,
  decisionItem: () => decisionItem2,
  decisionList: () => decisionList2,
  decisionListSelector: () => decisionListSelector,
  doc: () => doc2,
  embedCard: () => embedCard2,
  emoji: () => emoji2,
  expand: () => expand2,
  expandToJSON: () => toJSON,
  expandWithNestedExpand: () => expandWithNestedExpand,
  extendedPanel: () => extendedPanel,
  extension: () => extension2,
  extensionFrame: () => extensionFrame,
  getCellAttrs: () => getCellAttrs,
  getCellDomAttrs: () => getCellDomAttrs,
  hardBreak: () => hardBreak2,
  heading: () => heading2,
  image: () => image2,
  inlineCard: () => inlineCard2,
  inlineExtension: () => inlineExtension2,
  layoutColumn: () => layoutColumn2,
  layoutSection: () => layoutSection2,
  layoutSectionWithSingleColumn: () => layoutSectionWithSingleColumn,
  listItem: () => listItem2,
  listItemWithDecisionStage0: () => listItemWithDecisionStage0,
  listItemWithTask: () => listItemWithTask,
  media: () => media2,
  mediaGroup: () => mediaGroup2,
  mediaInline: () => mediaInline2,
  mediaSingle: () => mediaSingle2,
  mediaSingleFull: () => mediaSingleFull2,
  mediaSingleSpec: () => mediaSingleSpec,
  mediaSingleToJSON: () => toJSON9,
  mediaSingleWithCaption: () => mediaSingleWithCaption,
  mediaSingleWithWidthType: () => mediaSingleWithWidthType,
  mediaToJSON: () => toJSON7,
  mention: () => mention2,
  mentionToJSON: () => toJSON5,
  multiBodiedExtension: () => multiBodiedExtension,
  nestedExpand: () => nestedExpand2,
  orderedList: () => orderedList2,
  orderedListSelector: () => orderedListSelector,
  orderedListWithOrder: () => orderedListWithOrder,
  panelWithBlockquoteStage0: () => panelWithBlockquoteStage0,
  paragraph: () => paragraph2,
  placeholder: () => placeholder2,
  rule: () => rule2,
  status: () => status2,
  table: () => table2,
  tableBackgroundBorderColor: () => tableBackgroundBorderColor,
  tableBackgroundColorNames: () => tableBackgroundColorNames,
  tableBackgroundColorPalette: () => tableBackgroundColorPalette,
  tableCell: () => tableCell2,
  tableCellContentDomSelector: () => tableCellContentDomSelector,
  tableCellContentWrapperSelector: () => tableCellContentWrapperSelector,
  tableCellSelector: () => tableCellSelector,
  tableHeader: () => tableHeader2,
  tableHeaderSelector: () => tableHeaderSelector,
  tablePrefixSelector: () => tablePrefixSelector,
  tableRow: () => tableRow2,
  tableStage0: () => tableStage0,
  tableToJSON: () => tableToJSON,
  tableWithCustomWidth: () => tableWithCustomWidth,
  taskItem: () => taskItem2,
  taskList: () => taskList2,
  taskListSelector: () => taskListSelector,
  text: () => text2,
  toJSONTableCell: () => toJSONTableCell,
  toJSONTableHeader: () => toJSONTableHeader,
  unknownBlock: () => unknown_block_default,
  unsupportedBlock: () => unsupportedBlock2,
  unsupportedInline: () => unsupportedInline2
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/createPMSpecFactory.js
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var createPMNodeSpecFactory = function createPMNodeSpecFactory2(nodeSpec) {
  return function(_ref) {
    var parseDOM = _ref.parseDOM, toDOM69 = _ref.toDOM, toDebugString = _ref.toDebugString;
    return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, nodeSpec), parseDOM && {
      parseDOM
    }), toDOM69 && {
      toDOM: toDOM69
    }), toDebugString && {
      toDebugString
    });
  };
};
var createPMMarkSpecFactory = function createPMMarkSpecFactory2(markSpec) {
  return function(_ref2) {
    var parseDOM = _ref2.parseDOM, toDOM69 = _ref2.toDOM, toDebugString = _ref2.toDebugString;
    return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, markSpec), parseDOM && {
      parseDOM
    }), toDOM69 && {
      toDOM: toDOM69
    }), toDebugString && {
      toDebugString
    });
  };
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/next-schema/generated/nodeTypes.js
var blockCard = createPMNodeSpecFactory({
  group: "block",
  attrs: {
    url: {
      default: null
    },
    datasource: {
      default: null
    },
    width: {
      default: null
    },
    layout: {
      default: null
    },
    data: {
      default: null
    }
  },
  selectable: true,
  draggable: true
});
var blockquote = createPMNodeSpecFactory({
  content: "(paragraph | orderedList | bulletList | unsupportedBlock | codeBlock | mediaGroup | mediaSingle)+",
  group: "block",
  selectable: false,
  defining: true
});
var blockquoteLegacy = createPMNodeSpecFactory({
  content: "(paragraph | unsupportedBlock)+",
  group: "block",
  selectable: false,
  defining: true
});
var blockquoteWithoutNestedCodeblockOrMedia = createPMNodeSpecFactory({
  content: "(paragraph | orderedList | bulletList | unsupportedBlock)+",
  group: "block",
  selectable: false,
  defining: true
});
var bodiedExtension = createPMNodeSpecFactory({
  content: "(paragraph | panel | blockquote | orderedList | bulletList | rule | heading | codeBlock | mediaGroup | mediaSingle | decisionList | taskList | table | blockCard | embedCard | extension | unsupportedBlock)+",
  marks: "dataConsumer fragment",
  group: "block",
  attrs: {
    extensionKey: {
      default: ""
    },
    extensionType: {
      default: ""
    },
    parameters: {
      default: null
    },
    text: {
      default: null
    },
    layout: {
      default: "default"
    },
    localId: {
      default: null
    }
  },
  selectable: true,
  defining: true,
  isolating: true
});
var bodiedExtensionWithMarks = createPMNodeSpecFactory({
  marks: "dataConsumer fragment",
  group: "block",
  attrs: {
    extensionKey: {
      default: ""
    },
    extensionType: {
      default: ""
    },
    parameters: {
      default: null
    },
    text: {
      default: null
    },
    layout: {
      default: "default"
    },
    localId: {
      default: null
    }
  },
  selectable: true,
  defining: true,
  isolating: true
});
var bulletList = createPMNodeSpecFactory({
  content: "listItem+",
  marks: "unsupportedMark unsupportedNodeAttribute",
  group: "block",
  selectable: false
});
var caption = createPMNodeSpecFactory({
  content: "(hardBreak | mention | emoji | date | placeholder | inlineCard | status | text | unsupportedInline)*",
  marks: "_",
  selectable: false,
  isolating: true
});
var codeBlock = createPMNodeSpecFactory({
  content: "(text | unsupportedInline)*",
  marks: "unsupportedMark unsupportedNodeAttribute",
  group: "block",
  attrs: {
    language: {
      default: null
    },
    uniqueId: {
      default: null
    }
  },
  code: true,
  defining: true
});
var codeBlockWithNoMarks = createPMNodeSpecFactory({
  marks: "unsupportedMark unsupportedNodeAttribute",
  group: "block",
  attrs: {
    language: {
      default: null
    },
    uniqueId: {
      default: null
    }
  },
  code: true,
  defining: true
});
var confluenceJiraIssue = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  atom: true,
  attrs: {
    issueKey: {
      default: ""
    },
    macroId: {
      default: null
    },
    schemaVersion: {
      default: null
    },
    server: {
      default: null
    },
    serverId: {
      default: null
    }
  }
});
var confluenceUnsupportedBlock = createPMNodeSpecFactory({
  group: "block",
  attrs: {
    cxhtml: {
      default: null
    }
  }
});
var confluenceUnsupportedInline = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  atom: true,
  attrs: {
    cxhtml: {
      default: null
    }
  }
});
var date = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    timestamp: {
      default: ""
    }
  },
  selectable: true
});
var dateStage0 = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    timestamp: {
      default: ""
    }
  },
  selectable: true
});
var decisionItem = createPMNodeSpecFactory({
  content: "inline*",
  marks: "_",
  attrs: {
    localId: {
      default: ""
    },
    state: {
      default: "DECIDED"
    }
  },
  defining: true
});
var decisionList = createPMNodeSpecFactory({
  content: "(decisionItem | unsupportedBlock)+",
  marks: "unsupportedMark unsupportedNodeAttribute",
  group: "block",
  attrs: {
    localId: {
      default: ""
    }
  },
  selectable: false,
  defining: true
});
var doc = createPMNodeSpecFactory({
  content: "(block | layoutSection | blockRootOnly)+",
  marks: "unsupportedMark unsupportedNodeAttribute alignment indentation dataConsumer fragment breakout"
});
var embedCard = createPMNodeSpecFactory({
  group: "block",
  attrs: {
    url: {
      default: ""
    },
    layout: {
      default: "center"
    },
    width: {
      default: 100
    },
    originalHeight: {
      default: null
    },
    originalWidth: {
      default: null
    }
  },
  selectable: true
});
var emoji = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    shortName: {
      default: ""
    },
    id: {
      default: ""
    },
    text: {
      default: ""
    }
  },
  selectable: true
});
var emojiStage0 = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    shortName: {
      default: ""
    },
    id: {
      default: ""
    },
    text: {
      default: ""
    }
  },
  selectable: true
});
var expand = createPMNodeSpecFactory({
  content: "(paragraph | panel | blockquote | orderedList | bulletList | rule | heading | codeBlock | mediaGroup | mediaSingle | decisionList | taskList | table | blockCard | embedCard | extension | unsupportedBlock | nestedExpand)+",
  marks: "unsupportedMark unsupportedNodeAttribute fragment dataConsumer",
  group: "block",
  attrs: {
    title: {
      default: ""
    },
    __expanded: {
      default: true
    }
  },
  selectable: true,
  isolating: true
});
var expandWithNoMark = createPMNodeSpecFactory({
  group: "block",
  attrs: {
    title: {
      default: ""
    },
    __expanded: {
      default: true
    }
  },
  selectable: true,
  isolating: true
});
var expandWithoutNestedExpand = createPMNodeSpecFactory({
  content: "(paragraph | panel | blockquote | orderedList | bulletList | rule | heading | codeBlock | mediaGroup | mediaSingle | decisionList | taskList | table | blockCard | embedCard | extension | unsupportedBlock)+",
  marks: "unsupportedMark unsupportedNodeAttribute fragment dataConsumer",
  group: "block",
  attrs: {
    title: {
      default: ""
    },
    __expanded: {
      default: true
    }
  },
  selectable: true,
  isolating: true
});
var extension = createPMNodeSpecFactory({
  group: "block",
  atom: true,
  attrs: {
    extensionKey: {
      default: ""
    },
    extensionType: {
      default: ""
    },
    parameters: {
      default: null
    },
    text: {
      default: null
    },
    layout: {
      default: "default"
    },
    localId: {
      default: null
    }
  },
  selectable: true
});
var extensionWithMarks = createPMNodeSpecFactory({
  group: "block",
  atom: true,
  attrs: {
    extensionKey: {
      default: ""
    },
    extensionType: {
      default: ""
    },
    parameters: {
      default: null
    },
    text: {
      default: null
    },
    layout: {
      default: "default"
    },
    localId: {
      default: null
    }
  },
  selectable: true
});
var extensionFrameStage0 = createPMNodeSpecFactory({
  content: "(paragraph | panel | blockquote | orderedList | bulletList | rule | heading | codeBlock | mediaGroup | mediaSingle | decisionList | taskList | table | extension | bodiedExtension | unsupportedBlock | blockCard | embedCard)+",
  marks: "dataConsumer fragment",
  attrs: {},
  selectable: false,
  definingAsContext: false,
  definingForContent: true,
  isolating: true
});
var hardBreak = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  selectable: false
});
var heading = createPMNodeSpecFactory({
  content: "inline*",
  group: "block",
  attrs: {
    level: {
      default: 1
    },
    localId: {
      default: null
    }
  },
  selectable: false,
  defining: true
});
var headingWithAlignment = createPMNodeSpecFactory({
  group: "block",
  attrs: {
    level: {
      default: 1
    },
    localId: {
      default: null
    }
  },
  selectable: false,
  defining: true
});
var headingWithIndentation = createPMNodeSpecFactory({
  group: "block",
  attrs: {
    level: {
      default: 1
    },
    localId: {
      default: null
    }
  },
  selectable: false,
  defining: true
});
var headingWithNoMarks = createPMNodeSpecFactory({
  group: "block",
  attrs: {
    level: {
      default: 1
    },
    localId: {
      default: null
    }
  },
  selectable: false,
  defining: true
});
var image = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    src: {
      default: ""
    },
    alt: {
      default: ""
    },
    title: {
      default: null
    }
  },
  draggable: true
});
var inlineCard = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    url: {
      default: null
    },
    data: {
      default: null
    }
  },
  selectable: true,
  draggable: true
});
var inlineCardStage0 = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    url: {
      default: null
    },
    data: {
      default: null
    }
  },
  selectable: true,
  draggable: true
});
var inlineExtension = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    extensionKey: {
      default: ""
    },
    extensionType: {
      default: ""
    },
    parameters: {
      default: null
    },
    text: {
      default: null
    },
    localId: {
      default: null
    }
  },
  selectable: true
});
var inlineExtensionWithMarks = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    extensionKey: {
      default: ""
    },
    extensionType: {
      default: ""
    },
    parameters: {
      default: null
    },
    text: {
      default: null
    },
    localId: {
      default: null
    }
  },
  selectable: true
});
var layoutColumn = createPMNodeSpecFactory({
  content: "(block | unsupportedBlock)+",
  marks: "unsupportedMark unsupportedNodeAttribute alignment indentation dataConsumer fragment",
  attrs: {
    width: {
      default: void 0
    }
  },
  selectable: false,
  isolating: true
});
var layoutSection = createPMNodeSpecFactory({
  content: "(layoutColumn | unsupportedBlock){1,3} unsupportedBlock* | unsupportedBlock+",
  marks: "unsupportedMark unsupportedNodeAttribute",
  isolating: true
});
var layoutSectionFull = createPMNodeSpecFactory({
  content: "(layoutColumn | unsupportedBlock){2,3}",
  marks: "unsupportedMark unsupportedNodeAttribute",
  isolating: true
});
var layoutSectionWithSingleColumnStage0 = createPMNodeSpecFactory({
  content: "(layoutColumn | unsupportedBlock){1,3}",
  marks: "unsupportedMark unsupportedNodeAttribute",
  isolating: true
});
var listItem = createPMNodeSpecFactory({
  content: "(paragraph | mediaSingle | codeBlock | unsupportedBlock) (paragraph | bulletList | orderedList | taskList | mediaSingle | codeBlock | unsupportedBlock)*",
  marks: "unsupportedMark unsupportedNodeAttribute",
  selectable: false,
  defining: true
});
var listItemLegacy = createPMNodeSpecFactory({
  content: "(paragraph | mediaSingle | codeBlock | unsupportedBlock) (paragraph | bulletList | orderedList | mediaSingle | codeBlock | unsupportedBlock)*",
  marks: "unsupportedMark unsupportedNodeAttribute",
  selectable: false,
  defining: true
});
var listItemWithNestedDecisionStage0 = createPMNodeSpecFactory({
  content: "(paragraph | mediaSingle | codeBlock | unsupportedBlock | decisionList) (paragraph | bulletList | orderedList | taskList | mediaSingle | codeBlock | unsupportedBlock | decisionList)*",
  marks: "unsupportedMark unsupportedNodeAttribute",
  selectable: false,
  defining: true
});
var media = createPMNodeSpecFactory({
  attrs: {
    type: {
      default: "file"
    },
    id: {
      default: ""
    },
    alt: {
      default: ""
    },
    collection: {
      default: ""
    },
    height: {
      default: null
    },
    occurrenceKey: {
      default: null
    },
    width: {
      default: null
    },
    __contextId: {
      default: null
    },
    __displayType: {
      default: null
    },
    __external: {
      default: false
    },
    __fileMimeType: {
      default: null
    },
    __fileName: {
      default: null
    },
    __fileSize: {
      default: null
    },
    __mediaTraceId: {
      default: null
    },
    url: {
      default: null
    }
  },
  selectable: true
});
var mediaGroup = createPMNodeSpecFactory({
  content: "(media | unsupportedBlock)+",
  marks: "link annotation border unsupportedMark unsupportedNodeAttribute",
  group: "block",
  attrs: {},
  selectable: false
});
var mediaInline = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    type: {
      default: "file"
    },
    url: {
      default: null
    },
    id: {
      default: ""
    },
    alt: {
      default: ""
    },
    collection: {
      default: ""
    },
    occurrenceKey: {
      default: null
    },
    width: {
      default: null
    },
    height: {
      default: null
    },
    __fileName: {
      default: null
    },
    __fileSize: {
      default: null
    },
    __fileMimeType: {
      default: null
    },
    __displayType: {
      default: null
    },
    __contextId: {
      default: null
    },
    __mediaTraceId: {
      default: null
    },
    __external: {
      default: false
    }
  },
  selectable: true
});
var mediaSingle = createPMNodeSpecFactory({
  group: "block",
  atom: true,
  attrs: {
    layout: {
      default: "center"
    },
    width: {
      default: null
    }
  },
  selectable: true,
  content: "media|unsupportedBlock+|media unsupportedBlock+",
  marks: "annotation border link unsupportedMark unsupportedNodeAttribute"
});
var mediaSingleCaption = createPMNodeSpecFactory({
  content: "media|unsupportedBlock+|media (caption|unsupportedBlock) unsupportedBlock*",
  marks: "link annotation border unsupportedMark unsupportedNodeAttribute",
  group: "block",
  atom: false,
  attrs: {
    layout: {
      default: "center"
    },
    width: {
      default: null
    }
  },
  selectable: true
});
var mediaSingleFull = createPMNodeSpecFactory({
  content: "media|unsupportedBlock+|media (caption|unsupportedBlock) unsupportedBlock*",
  marks: "link annotation border unsupportedMark unsupportedNodeAttribute",
  group: "block",
  atom: false,
  attrs: {
    width: {
      default: null
    },
    layout: {
      default: "center"
    },
    widthType: {
      default: null
    }
  },
  selectable: true
});
var mediaSingleWidthType = createPMNodeSpecFactory({
  content: "media|unsupportedBlock+|media unsupportedBlock+",
  marks: "link annotation border unsupportedMark unsupportedNodeAttribute",
  group: "block",
  atom: true,
  attrs: {
    width: {
      default: null
    },
    layout: {
      default: "center"
    },
    widthType: {
      default: null
    }
  },
  selectable: true
});
var mention = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    id: {
      default: ""
    },
    localId: {
      default: null
    },
    text: {
      default: ""
    },
    accessLevel: {
      default: ""
    },
    userType: {
      default: null
    }
  },
  selectable: true
});
var mentionStage0 = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    id: {
      default: ""
    },
    localId: {
      default: null
    },
    text: {
      default: ""
    },
    accessLevel: {
      default: ""
    },
    userType: {
      default: null
    }
  },
  selectable: true
});
var multiBodiedExtensionStage0 = createPMNodeSpecFactory({
  content: "extensionFrame+",
  group: "blockRootOnly",
  attrs: {
    extensionKey: {
      default: ""
    },
    extensionType: {
      default: ""
    },
    parameters: {
      default: null
    },
    text: {
      default: null
    },
    layout: {
      default: "default"
    },
    localId: {
      default: null
    }
  },
  selectable: true,
  definingAsContext: true
});
var nestedExpand = createPMNodeSpecFactory({
  content: "(paragraph | heading | mediaSingle | mediaGroup | codeBlock | bulletList | orderedList | taskList | decisionList | rule | panel | blockquote | unsupportedBlock)+",
  marks: "unsupportedMark unsupportedNodeAttribute",
  attrs: {
    title: {
      default: ""
    },
    __expanded: {
      default: true
    }
  },
  selectable: true,
  isolating: true
});
var nestedExpandWithNoMarks = createPMNodeSpecFactory({
  attrs: {
    title: {
      default: ""
    },
    __expanded: {
      default: true
    }
  },
  selectable: true,
  isolating: true
});
var orderedList = createPMNodeSpecFactory({
  content: "listItem+",
  marks: "unsupportedMark unsupportedNodeAttribute",
  group: "block",
  attrs: {
    order: {
      default: 1
    }
  },
  selectable: false
});
var panel = createPMNodeSpecFactory({
  content: "(paragraph | heading | bulletList | orderedList | blockCard | mediaGroup | mediaSingle | codeBlock | taskList | rule | decisionList | unsupportedBlock)+",
  marks: "unsupportedMark unsupportedNodeAttribute",
  group: "block",
  attrs: {
    panelType: {
      default: "info"
    },
    panelIcon: {
      default: null
    },
    panelIconId: {
      default: null
    },
    panelIconText: {
      default: null
    },
    panelColor: {
      default: null
    }
  },
  selectable: true
});
var panelLegacy = createPMNodeSpecFactory({
  content: "(paragraph | heading | bulletList | orderedList | blockCard | unsupportedBlock)+",
  marks: "unsupportedMark unsupportedNodeAttribute",
  group: "block",
  attrs: {
    panelType: {
      default: "info"
    },
    panelIcon: {
      default: null
    },
    panelIconId: {
      default: null
    },
    panelIconText: {
      default: null
    },
    panelColor: {
      default: null
    }
  },
  selectable: true
});
var panelWithNestedBlockquoteStage0 = createPMNodeSpecFactory({
  content: "(paragraph | heading | bulletList | orderedList | blockCard | mediaGroup | mediaSingle | codeBlock | taskList | rule | decisionList | unsupportedBlock | blockquote)+",
  marks: "unsupportedMark unsupportedNodeAttribute",
  group: "block",
  attrs: {
    panelType: {
      default: "info"
    },
    panelIcon: {
      default: null
    },
    panelIconId: {
      default: null
    },
    panelIconText: {
      default: null
    },
    panelColor: {
      default: null
    }
  },
  selectable: true
});
var paragraph = createPMNodeSpecFactory({
  content: "inline*",
  marks: "link em strong strike subsup underline textColor annotation backgroundColor typeAheadQuery confluenceInlineComment unsupportedNodeAttribute unsupportedMark code dataConsumer fragment border",
  group: "block",
  attrs: {
    localId: {
      default: null
    }
  },
  selectable: false
});
var paragraphWithAlignment = createPMNodeSpecFactory({
  group: "block",
  attrs: {
    localId: {
      default: null
    }
  },
  selectable: false
});
var paragraphWithIndentation = createPMNodeSpecFactory({
  group: "block",
  attrs: {
    localId: {
      default: null
    }
  },
  selectable: false
});
var paragraphWithNoMarks = createPMNodeSpecFactory({
  group: "block",
  attrs: {
    localId: {
      default: null
    }
  },
  selectable: false
});
var placeholder = createPMNodeSpecFactory({
  marks: "",
  group: "inline",
  inline: true,
  attrs: {
    text: {
      default: ""
    }
  },
  selectable: false
});
var rule = createPMNodeSpecFactory({
  group: "block"
});
var status = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    text: {
      default: ""
    },
    color: {
      default: ""
    },
    localId: {
      default: ""
    },
    style: {
      default: ""
    }
  },
  selectable: true
});
var statusStage0 = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    text: {
      default: ""
    },
    color: {
      default: ""
    },
    localId: {
      default: ""
    },
    style: {
      default: ""
    }
  },
  selectable: true
});
var table = createPMNodeSpecFactory({
  content: "tableRow+",
  marks: "unsupportedMark unsupportedNodeAttribute",
  group: "block",
  attrs: {
    displayMode: {
      default: null
    },
    isNumberColumnEnabled: {
      default: false
    },
    layout: {
      default: "default"
    },
    localId: {
      default: ""
    },
    width: {
      default: null
    },
    __autoSize: {
      default: false
    }
  },
  selectable: true,
  isolating: true,
  tableRole: "table"
});
var tableCell = createPMNodeSpecFactory({
  content: "(paragraph | panel | blockquote | orderedList | bulletList | rule | heading | codeBlock | mediaSingle | mediaGroup | decisionList | taskList | blockCard | embedCard | extension | nestedExpand | unsupportedBlock)+",
  marks: "alignment unsupportedMark unsupportedNodeAttribute dataConsumer fragment",
  attrs: {
    colspan: {
      default: 1
    },
    rowspan: {
      default: 1
    },
    colwidth: {
      default: null
    },
    background: {
      default: null
    }
  },
  selectable: false,
  isolating: true,
  tableRole: "cell"
});
var tableHeader = createPMNodeSpecFactory({
  content: "(paragraph | panel | blockquote | orderedList | bulletList | rule | heading | codeBlock | mediaSingle | mediaGroup | decisionList | taskList | blockCard | embedCard | extension | nestedExpand)+",
  marks: "alignment unsupportedMark unsupportedNodeAttribute dataConsumer fragment",
  attrs: {
    colspan: {
      default: 1
    },
    rowspan: {
      default: 1
    },
    colwidth: {
      default: null
    },
    background: {
      default: null
    }
  },
  selectable: false,
  isolating: true,
  tableRole: "header_cell"
});
var tableRow = createPMNodeSpecFactory({
  content: "(tableCell | tableHeader)+",
  marks: "unsupportedMark unsupportedNodeAttribute",
  selectable: false,
  tableRole: "row"
});
var taskItem = createPMNodeSpecFactory({
  content: "inline*",
  marks: "_",
  attrs: {
    localId: {
      default: ""
    },
    state: {
      default: "TODO"
    }
  },
  selectable: false,
  defining: true
});
var taskList = createPMNodeSpecFactory({
  content: "(taskItem | unsupportedBlock)+ (taskItem | taskList | unsupportedBlock)*",
  marks: "unsupportedMark unsupportedNodeAttribute",
  group: "block",
  attrs: {
    localId: {
      default: ""
    }
  },
  selectable: false,
  defining: true
});
var text = createPMNodeSpecFactory({
  group: "inline"
});
var textCodeInline = createPMNodeSpecFactory({
  group: "inline"
});
var textFormatted = createPMNodeSpecFactory({
  group: "inline"
});
var unsupportedBlock = createPMNodeSpecFactory({
  group: "block",
  atom: true,
  attrs: {
    originalValue: {
      default: {}
    }
  },
  selectable: true
});
var unsupportedInline = createPMNodeSpecFactory({
  group: "inline",
  inline: true,
  attrs: {
    originalValue: {
      default: {}
    }
  },
  selectable: true
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/expand.js
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function getExpandAttrs(domNode) {
  var dom = domNode;
  return {
    title: dom.getAttribute("data-title"),
    __expanded: true
  };
}
var nodeSpecOptions = {
  parseDOM: [{
    context: "table//",
    tag: 'div[data-node-type="expand"]',
    getAttrs: getExpandAttrs
  }, {
    context: "expand//",
    tag: '[data-node-type="expand"]',
    skip: true
  }, {
    context: "nestedExpand//",
    tag: '[data-node-type="expand"]',
    skip: true
  }, {
    tag: '[data-node-type="nestedExpand"] button',
    ignore: true
  }, {
    tag: '[data-node-type="expand"] button',
    ignore: true
  }, {
    tag: 'div[data-node-type="expand"]',
    getAttrs: getExpandAttrs
  }],
  toDOM: function toDOM(node) {
    var attrs = {
      "data-node-type": "expand",
      "data-title": node.attrs.title,
      "data-expanded": node.attrs.__expanded
    };
    return ["div", attrs, 0];
  }
};
var expand2 = expandWithoutNestedExpand(nodeSpecOptions);
var expandWithNestedExpand = expand(nodeSpecOptions);
var toJSON = function toJSON2(node) {
  return {
    attrs: Object.keys(node.attrs).filter(function(key) {
      return !key.startsWith("__");
    }).reduce(function(obj, key) {
      return _objectSpread2(_objectSpread2({}, obj), {}, _defineProperty({}, key, node.attrs[key]));
    }, {})
  };
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/confluence-jira-issue.js
var name = "confluenceJiraIssue";
var confluenceJiraIssue2 = confluenceJiraIssue({
  parseDOM: [{
    tag: 'span[data-node-type="'.concat(name, '"]'),
    getAttrs: function getAttrs(domNode) {
      var dom = domNode;
      return {
        issueKey: dom.textContent,
        macroId: dom.dataset && dom.dataset.macroId,
        schemaVersion: dom.dataset && dom.dataset.schemaVersion,
        server: dom.dataset && dom.dataset.server,
        serverId: dom.dataset && dom.dataset.serverId
      };
    }
  }],
  toDOM: function toDOM2(node) {
    var attrs = {
      "data-node-type": name,
      "data-macro-id": node.attrs.macroId,
      "data-schema-version": node.attrs.schemaVersion,
      "data-server": node.attrs.server,
      "data-server-id": node.attrs.serverId,
      "data-jira-issue": node.attrs.issueKey
    };
    return ["span", attrs, node.attrs.issueKey];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/confluence-unsupported-block.js
var name2 = "confluenceUnsupportedBlock";
var confluenceUnsupportedBlock2 = confluenceUnsupportedBlock({
  toDOM: function toDOM3(node) {
    var attrs = {
      "data-node-type": name2,
      "data-confluence-unsupported": "block",
      "data-confluence-unsupported-block-cxhtml": node.attrs["cxhtml"]
    };
    return ["div", attrs, "Unsupported content"];
  },
  parseDOM: [{
    tag: 'div[data-node-type="'.concat(name2, '"]'),
    getAttrs: function getAttrs2(dom) {
      return {
        cxhtml: dom.getAttribute("data-confluence-unsupported-block-cxhtml")
      };
    }
  }]
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/confluence-unsupported-inline.js
var name3 = "confluenceUnsupportedInline";
var confluenceUnsupportedInline2 = confluenceUnsupportedInline({
  toDOM: function toDOM4(node) {
    var attrs = {
      "data-node-type": name3,
      "data-confluence-unsupported": "inline",
      "data-confluence-unsupported-inline-cxhtml": node.attrs["cxhtml"]
    };
    return ["div", attrs, "Unsupported content"];
  },
  parseDOM: [{
    tag: 'div[data-node-type="'.concat(name3, '"]'),
    getAttrs: function getAttrs3(dom) {
      return {
        cxhtml: dom.getAttribute("data-confluence-unsupported-inline-cxhtml")
      };
    }
  }]
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/doc.js
var doc2 = doc({});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/blockquote.js
var nodeSpecOptions2 = {
  parseDOM: [{
    tag: "blockquote"
  }],
  toDOM: function toDOM5() {
    return ["blockquote", 0];
  }
};
var blockquote2 = blockquoteLegacy(nodeSpecOptions2);
var blockquoteWithNestedCodeblockOrMedia = blockquote(nodeSpecOptions2);
var blockquoteWithList = blockquoteWithoutNestedCodeblockOrMedia({
  parseDOM: [{
    tag: "blockquote"
  }],
  toDOM: function toDOM6() {
    return ["blockquote", 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/bullet-list.js
var bulletListSelector = ".ak-ul";
var bulletList2 = bulletList({
  parseDOM: [{
    tag: "ul"
  }],
  toDOM: function toDOM7() {
    var attrs = {
      class: bulletListSelector.substr(1)
    };
    return ["ul", attrs, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/code-block.js
var getLanguageFromEditorStyle = function getLanguageFromEditorStyle2(dom) {
  return dom.getAttribute("data-language") || void 0;
};
var getLanguageFromBitbucketStyle = function getLanguageFromBitbucketStyle2(dom) {
  if (dom && dom.classList.contains("codehilite")) {
    return extractLanguageFromClass(dom.className);
  }
  return;
};
var getLanguageFromCode = function getLanguageFromCode2(dom) {
  var firstChild = dom.firstElementChild;
  if (firstChild && firstChild.nodeName === "CODE") {
    return firstChild.getAttribute("data-language") || void 0;
  }
};
var extractLanguageFromClass = function extractLanguageFromClass2(className) {
  var languageRegex = /(?:^|\s)language-([^\s]+)/;
  var result = languageRegex.exec(className);
  if (result && result[1]) {
    return result[1];
  }
  return;
};
var removeLastNewLine = function removeLastNewLine2(dom) {
  var parent = dom && dom.parentElement;
  if (parent && parent.classList.contains("codehilite")) {
    dom.textContent = dom.textContent.replace(/\n$/, "");
  }
  return dom;
};
function parseCodeFromHtml(node) {
  var code3 = "";
  node.childNodes.forEach(function(child) {
    if (child.nodeType === Node.TEXT_NODE) {
      code3 += child.nodeValue;
    } else if (child.nodeType === Node.ELEMENT_NODE && child instanceof Element) {
      var tagName = child.tagName.toLowerCase();
      if (tagName === "div" || tagName === "p") {
        if (child.previousElementSibling !== null) {
          code3 += "\n";
        }
      }
      if (tagName === "br") {
        code3 += "\n";
      } else {
        code3 += parseCodeFromHtml(child);
      }
    }
  });
  return code3;
}
var codeBlock2 = codeBlock({
  parseDOM: [
    {
      tag: "pre",
      preserveWhitespace: "full",
      getAttrs: function getAttrs4(domNode) {
        var dom = domNode;
        var language = getLanguageFromBitbucketStyle(dom.parentElement) || getLanguageFromEditorStyle(dom.parentElement) || getLanguageFromCode(dom) || dom.getAttribute("data-language");
        dom = removeLastNewLine(dom);
        return {
          language
        };
      }
    },
    // Handle VSCode, Android Studio paste
    // Checking `white-space: pre-wrap` is too aggressive @see ED-2627
    {
      tag: "div[style]",
      preserveWhitespace: "full",
      getAttrs: function getAttrs5(domNode) {
        var dom = domNode;
        if (dom.style.whiteSpace === "pre" || dom.style.fontFamily && dom.style.fontFamily.toLowerCase().indexOf("monospace") > -1) {
          return {};
        }
        return false;
      },
      getContent: function getContent(domNode, schema) {
        if (getBooleanFF("platform.editor.codeblock.parsedom-divstyle-improve_5ib4n")) {
          var _code = parseCodeFromHtml(domNode);
          return _code ? Fragment.from(schema.text(_code)) : Fragment.empty;
        }
        var dom = domNode;
        var code3 = Array.from(dom.children).map(function(child) {
          return child.textContent;
        }).filter(function(x) {
          return x !== void 0;
        }).join("\n");
        return code3 ? Fragment.from(schema.text(code3)) : Fragment.empty;
      }
    },
    // Handle GitHub/Gist paste
    {
      tag: "table[style]",
      preserveWhitespace: "full",
      getAttrs: function getAttrs6(dom) {
        if (dom.querySelector('td[class*="blob-code"]')) {
          return {};
        }
        return false;
      }
    },
    {
      tag: "div.code-block",
      preserveWhitespace: "full",
      getAttrs: function getAttrs7(domNode) {
        var dom = domNode;
        var lineNumber = dom.querySelectorAll(".react-syntax-highlighter-line-number");
        if (lineNumber.length > 0) {
          lineNumber.forEach(function(line) {
            return line.remove();
          });
        }
        return {};
      }
    }
  ],
  toDOM: function toDOM8(node) {
    return ["pre", ["code", {
      "data-language": node.attrs.language
    }, 0]];
  }
});
var toJSON3 = function toJSON4(node) {
  return {
    attrs: Object.keys(node.attrs).reduce(function(memo, key) {
      if (key === "uniqueId") {
        return memo;
      }
      if (key === "language" && node.attrs.language === null) {
        return memo;
      }
      memo[key] = node.attrs[key];
      return memo;
    }, {})
  };
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/hard-break.js
var hardBreak2 = hardBreak({
  parseDOM: [{
    tag: "br"
  }],
  toDOM: function toDOM9() {
    return ["br"];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/heading.js
var getAttrs8 = function getAttrs9(level) {
  return function(domNode) {
    var _heading$attrs, _heading$attrs$localI;
    return {
      level,
      localId: domNode.getAttribute("data-local-id") || ((_heading$attrs = heading2.attrs) === null || _heading$attrs === void 0 ? void 0 : (_heading$attrs$localI = _heading$attrs.localId) === null || _heading$attrs$localI === void 0 ? void 0 : _heading$attrs$localI.default)
    };
  };
};
var heading2 = heading({
  parseDOM: [{
    tag: "h1",
    getAttrs: getAttrs8(1)
  }, {
    tag: "h2",
    getAttrs: getAttrs8(2)
  }, {
    tag: "h3",
    getAttrs: getAttrs8(3)
  }, {
    tag: "h4",
    getAttrs: getAttrs8(4)
  }, {
    tag: "h5",
    getAttrs: getAttrs8(5)
  }, {
    tag: "h6",
    getAttrs: getAttrs8(6)
  }],
  toDOM: function toDOM10(node) {
    var _node$attrs = node.attrs, level = _node$attrs.level, localId = _node$attrs.localId;
    var name7 = "h" + level;
    var attrs = localId !== void 0 && localId !== null ? [{
      "data-local-id": localId
    }] : [];
    return [name7].concat(attrs, [0]);
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/rule.js
var hrDOM = ["hr"];
var rule2 = rule({
  parseDOM: [{
    tag: "hr"
  }],
  toDOM: function toDOM11() {
    return hrDOM;
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/ordered-list.js
var orderedListSelector = ".ak-ol";
var orderedList2 = orderedList({
  parseDOM: [{
    tag: "ol"
  }],
  toDOM: function toDOM12() {
    var attrs = {
      class: orderedListSelector.substr(1)
    };
    return ["ol", attrs, 0];
  }
});
var resolveStart = function resolveStart2(start) {
  var num = Number(start);
  if (Number.isNaN(num)) {
    return;
  }
  if (num < 0) {
    return;
  }
  return Math.floor(Math.max(num, 0));
};
var orderedListWithOrder = orderedList({
  parseDOM: [{
    tag: "ol",
    getAttrs: function getAttrs10(domNode) {
      var dom = domNode;
      var startDOMAttr = dom.getAttribute("start");
      if (startDOMAttr) {
        var start = resolveStart(startDOMAttr);
        if (typeof start === "number") {
          return {
            order: start
          };
        }
      }
      return null;
    }
  }],
  toDOM: function toDOM13(node) {
    var _node$attrs;
    var start = resolveStart(node === null || node === void 0 ? void 0 : (_node$attrs = node.attrs) === null || _node$attrs === void 0 ? void 0 : _node$attrs.order);
    var attrs = {
      start: typeof start === "number" ? String(start) : void 0,
      class: orderedListSelector.substr(1)
    };
    return ["ol", attrs, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/paragraph.js
var paragraph2 = paragraph({
  parseDOM: [{
    tag: "p",
    getAttrs: function getAttrs11(domNode) {
      var _paragraph$attrs, _paragraph$attrs$loca;
      var dom = domNode;
      var attrs = {
        localId: dom.getAttribute("data-local-id") || ((_paragraph$attrs = paragraph2.attrs) === null || _paragraph$attrs === void 0 ? void 0 : (_paragraph$attrs$loca = _paragraph$attrs.localId) === null || _paragraph$attrs$loca === void 0 ? void 0 : _paragraph$attrs$loca.default)
      };
      return attrs;
    }
  }],
  toDOM: function toDOM14(node) {
    var localId = node.attrs.localId;
    var name7 = "p";
    var attrs = localId !== void 0 && localId !== null ? [{
      "data-local-id": localId
    }] : [];
    return [name7].concat(attrs, [0]);
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/utils/confluence/emoji.js
var DEFAULT_EMOJI_ID = "2b50";
var HC_EMOTICON_PREFIX = "atlassian-";
var acNameToEmojiMap = {
  smile: ["1f642", ":slight_smile:", "🙂"],
  sad: ["1f641", ":slight_frown:", "🙁"],
  cheeky: ["1f61b", ":stuck_out_tongue:", "😛"],
  laugh: ["1f600", ":grinning:", "😀"],
  wink: ["1f609", ":wink:", "😉"],
  information: ["2139", ":information_source:", "ℹ"],
  tick: ["2705", ":white_check_mark:", "✅"],
  cross: ["274c", ":x:", "❌"],
  warning: ["26a0", ":warning:", "⚠"],
  plus: ["2795", ":heavy_plus_sign:", "➕"],
  minus: ["2796", ":heavy_minus_sign:", "➖"],
  question: ["2753", ":question:", "?"],
  "thumbs-up": ["1f44d", ":thumbsup:", "👍"],
  "thumbs-down": ["1f44e", ":thumbsdown:", "👎"],
  "light-on": ["1f4a1", ":bulb:", "💡"],
  "yellow-star": ["2b50", ":star:", "💛"],
  "light-off": ["1f6ab", ":no_entry_sign:", "🚫"],
  "red-star": ["2764", ":heart:", "❤️"],
  "green-star": ["1f49a", ":green_heart:", "💚"],
  "blue-star": ["1f499", ":blue_heart:", "💙"],
  heart: ["2764", ":heart:", "❤️"],
  "broken-heart": ["1f494", ":broken_heart:", "💔"]
};
function acNameToEmoji(acName) {
  var emojiData = acNameToEmojiMap[acName];
  return emojiData ? {
    id: emojiData[0],
    shortName: emojiData[1],
    text: emojiData[2]
  } : {
    id: DEFAULT_EMOJI_ID,
    shortName: ":".concat(acName, ":"),
    text: ""
  };
}
function acShortcutToEmoji(hipchatEmoticonShortName) {
  return {
    id: "".concat(HC_EMOTICON_PREFIX).concat(hipchatEmoticonShortName),
    shortName: ":".concat(hipchatEmoticonShortName, ":"),
    text: ""
  };
}

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/emoji.js
var emoji2 = emoji({
  parseDOM: [
    // Handle copy/paste beautiful panel from renderer />
    {
      tag: "div.ak-editor-panel__icon span",
      ignore: true
    },
    {
      tag: "span[data-emoji-short-name]",
      getAttrs: function getAttrs12(domNode) {
        var dom = domNode;
        return {
          shortName: dom.getAttribute("data-emoji-short-name") || emoji2.attrs.shortName.default,
          id: dom.getAttribute("data-emoji-id") || emoji2.attrs.id.default,
          text: dom.getAttribute("data-emoji-text") || emoji2.attrs.text.default
        };
      }
    },
    // Handle copy/paste from old <ac:emoticon />
    {
      tag: "img[data-emoticon-name]",
      getAttrs: function getAttrs13(dom) {
        return acNameToEmoji(dom.getAttribute("data-emoticon-name"));
      }
    },
    // Handle copy/paste from old <ac:hipchat-emoticons />
    {
      tag: "img[data-hipchat-emoticon]",
      getAttrs: function getAttrs14(dom) {
        return acShortcutToEmoji(dom.getAttribute("data-hipchat-emoticon"));
      }
    },
    // Handle copy/paste from bitbucket's <img class="emoji" />
    {
      tag: "img.emoji[data-emoji-short-name]",
      getAttrs: function getAttrs15(domNode) {
        var dom = domNode;
        return {
          shortName: dom.getAttribute("data-emoji-short-name") || emoji2.attrs.shortName.default,
          id: dom.getAttribute("data-emoji-id") || emoji2.attrs.id.default,
          text: dom.getAttribute("data-emoji-text") || emoji2.attrs.text.default
        };
      }
    }
  ],
  toDOM: function toDOM15(node) {
    var _node$attrs = node.attrs, shortName = _node$attrs.shortName, id = _node$attrs.id, text3 = _node$attrs.text;
    var attrs = {
      "data-emoji-short-name": shortName,
      "data-emoji-id": id,
      "data-emoji-text": text3,
      contenteditable: "false"
    };
    return ["span", attrs, text3];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/image.js
var image2 = image({
  parseDOM: [{
    tag: 'img[src^="data:image/"]',
    ignore: true
  }, {
    tag: "img[src]",
    getAttrs: function getAttrs16(domNode) {
      var dom = domNode;
      return {
        src: dom.getAttribute("src"),
        alt: dom.getAttribute("alt"),
        title: dom.getAttribute("title")
      };
    }
  }],
  toDOM: function toDOM16(node) {
    return ["img", node.attrs];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/utils/uuid.js
var generateUuid = function generateUuid2() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0;
    return (c === "x" ? r : r & 3 | 8).toString(16);
  });
};
var staticValue = false;
var uuid = {
  setStatic: function setStatic(value) {
    staticValue = value;
  },
  generate: function generate() {
    return staticValue || generateUuid();
  }
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/utils/colors.js
var R50 = "#FFEBE6";
var R75 = "#FFBDAD";
var R100 = "#FF8F73";
var R300 = "#FF5630";
var R500 = "#BF2600";
var Y50 = "#FFFAE6";
var Y75 = "#FFF0B3";
var Y200 = "#FFC400";
var Y400 = "#FF991F";
var G50 = "#E3FCEF";
var G75 = "#ABF5D1";
var G200 = "#57D9A3";
var G300 = "#36B37E";
var G500 = "#006644";
var B50 = "#DEEBFF";
var B75 = "#B3D4FF";
var B100 = "#4C9AFF";
var B400 = "#0052CC";
var B500 = "#0747A6";
var L200 = "#D3F1A7";
var N0 = "#FFFFFF";
var N20 = "#F4F5F7";
var N30 = "#EBECF0";
var N60 = "#B3BAC5";
var N80 = "#97A0AF";
var Neutral300 = "#DCDFE4";
var N300A = "#091E4224";
var N600 = "#758195";
var N800 = "#172B4D";
var N1000 = "#172B4D";
var M200 = "#FDD0EC";
var O200 = "#FEDEC8";
var P50 = "#EAE6FF";
var P75 = "#C0B6F2";
var P100 = "#998DD9";
var P200 = "#DFD8FD";
var P300 = "#6554C0";
var P500 = "#403294";
var T50 = "#E6FCFF";
var T75 = "#B3F5FF";
var T100 = "#79E2F2";
var T200 = "#C6EDFB";
var T300 = "#00B8D9";
var T500 = "#008DA6";
function normalizeHexColor(color, defaultColor) {
  if (!color) {
    return null;
  }
  color = color.trim().toLowerCase();
  if (isHex(color)) {
    if (color.length === 4) {
      color = color.split("").map(function(c) {
        return c === "#" ? "#" : "".concat(c).concat(c);
      }).join("");
    }
  } else if (isRgb(color)) {
    return rgbToHex(color);
  } else {
    if (color === "default") {
      return null;
    } else if (css_color_names_default && css_color_names_default[color]) {
      color = css_color_names_default[color];
    } else if (css_color_names_exports && css_color_names_exports[color]) {
      color = css_color_names_exports[color];
    } else {
      return null;
    }
  }
  if (color === defaultColor) {
    return null;
  }
  return color;
}
function hexToRgba(rawColor, alpha) {
  var color = normalizeHexColor(rawColor);
  if (!color) {
    return null;
  }
  var hex2rgb = function hex2rgb2(color2) {
    return color2.match(/[a-z0-9]{2}/gi).map(function(hex) {
      return parseInt(hex, 16);
    });
  };
  return "rgba(".concat(hex2rgb(color).concat(alpha).join(","), ")");
}
function rgbToHex(value) {
  var matches = value.match(/(0?\.?\d{1,3})%?\b/g);
  if (matches && matches.length >= 3) {
    var _matches$map = matches.map(Number), _matches$map2 = _slicedToArray(_matches$map, 3), red = _matches$map2[0], green = _matches$map2[1], blue = _matches$map2[2];
    return "#" + (blue | green << 8 | red << 16 | 1 << 24).toString(16).slice(1);
  }
  return null;
}
function isRgb(color) {
  return /rgba?\(/.test(color);
}
function isHex(color) {
  return /^#([A-Fa-f0-9]{3}){1,2}$/.test(color);
}

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/utils/url.js
var import_linkify_it = __toESM(require_linkify_it());
var whitelistedURLPatterns = [
  /^https?:\/\//im,
  /^ftps?:\/\//im,
  /^gopher:\/\//im,
  /^integrity:\/\//im,
  /^file:\/\//im,
  /^smb:\/\//im,
  /^dynamicsnav:\/\//im,
  /^jamfselfservice:\/\//im,
  /^\//im,
  /^mailto:/im,
  /^skype:/im,
  /^callto:/im,
  /^facetime:/im,
  /^git:/im,
  /^irc6?:/im,
  /^news:/im,
  /^nntp:/im,
  /^feed:/im,
  /^cvs:/im,
  /^svn:/im,
  /^mvn:/im,
  /^ssh:/im,
  /^scp:\/\//im,
  /^sftp:\/\//im,
  /^itms:/im,
  // This is not a valid notes link, but we support this pattern for backwards compatibility
  /^notes:/im,
  /^notes:\/\//im,
  /^hipchat:\/\//im,
  // This is not a valid sourcetree link, but we support this pattern for backwards compatibility
  /^sourcetree:/im,
  /^sourcetree:\/\//im,
  /^urn:/im,
  /^tel:/im,
  /^xmpp:/im,
  /^telnet:/im,
  /^vnc:/im,
  /^rdp:/im,
  /^whatsapp:/im,
  /^slack:/im,
  /^sips?:/im,
  /^magnet:/im,
  /^#/im
];
var isSafeUrl = function isSafeUrl2(url) {
  var urlTrimmed = url.trim();
  if (urlTrimmed.length === 0) {
    return true;
  }
  return whitelistedURLPatterns.some(function(p) {
    return p.test(urlTrimmed);
  });
};
var linkify = (0, import_linkify_it.default)();
linkify.add("sourcetree:", "http:");
linkify.add("jamfselfservice:", "http:");
var urlWithoutSpacesValidator = {
  validate: /[^\s]+/
};
linkify.add("tel:", urlWithoutSpacesValidator);
linkify.add("file:", urlWithoutSpacesValidator);
linkify.add("notes:", "http:");
var tlds = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");
var tlds2Char = "a[cdefgilmnoqrtuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrtuvwxyz]|n[acefgilopruz]|om|p[aefghkmnrtw]|qa|r[eosuw]|s[abcdegijklmnrtuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]";
tlds.push(tlds2Char);
linkify.tlds(tlds, false);
var LINK_REGEXP = /(https?|ftp|jamfselfservice|gopher|dynamicsnav|integrity|file|smb):\/\/[^\s]+/;
var linkifyMatch = function linkifyMatch2(text3) {
  if (!LINK_REGEXP.test(text3)) {
    return [];
  }
  var matches = [];
  var startpos = 0;
  var substr;
  while (substr = text3.substr(startpos)) {
    var link3 = (substr.match(LINK_REGEXP) || [""])[0];
    if (link3) {
      var index = substr.search(LINK_REGEXP);
      var start = index >= 0 ? index + startpos : index;
      var end = start + link3.length;
      matches.push({
        index: start,
        lastIndex: end,
        raw: link3,
        url: link3,
        text: link3,
        schema: ""
      });
      startpos += end;
    } else {
      break;
    }
  }
  return matches;
};
function getLinkMatch(str) {
  if (!str) {
    return null;
  }
  var match = linkifyMatch(str);
  if (!match.length) {
    match = linkify.match(str);
  }
  return match && match[0];
}
function normalizeUrl(url) {
  var match = getLinkMatch(url);
  return match && match.url || "";
}
function isRootRelative(url) {
  return url.startsWith("/");
}

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/utils/lch-color-inversion.js
var clamp = function clamp2(i, min, max) {
  return Math.round(Math.min(Math.max(i, min), max));
};
var expandShorthandHex = function expandShorthandHex2(input) {
  return input.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function(m, r, g, b) {
    return r + r + g + g + b + b;
  });
};
var rgbFromHex = function rgbFromHex2(input) {
  var fullHex = expandShorthandHex(input);
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(fullHex);
  return result === null ? null : {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  };
};
var rgbToHex2 = function rgbToHex3(_ref) {
  var r = _ref.r, g = _ref.g, b = _ref.b;
  var convertComponent = function convertComponent2(c) {
    var cBase16 = c.toString(16);
    return cBase16.length === 1 ? "0".concat(cBase16) : cBase16;
  };
  return "#".concat(convertComponent(r)).concat(convertComponent(g)).concat(convertComponent(b));
};
var rgbToXyz = function rgbToXyz2(rgb) {
  var convertRgbComponent = function convertRgbComponent2(c) {
    return c > 0.04045 ? Math.pow((c + 0.055) / 1.055, 2.4) : c / 12.92;
  };
  var convertXyzComponent = function convertXyzComponent2(c) {
    return c > 8856452e-9 ? Math.pow(c, 1 / 3) : c / 0.12841855 + 0.137931034;
  };
  var r = convertRgbComponent(rgb.r / 255);
  var g = convertRgbComponent(rgb.g / 255);
  var b = convertRgbComponent(rgb.b / 255);
  return {
    x: convertXyzComponent((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / 0.95047),
    y: convertXyzComponent(0.2126729 * r + 0.7151522 * g + 0.072175 * b),
    z: convertXyzComponent((0.0193339 * r + 0.119192 * g + 0.9503041 * b) / 1.08883)
  };
};
var xyzToLab = function xyzToLab2(_ref2) {
  var x = _ref2.x, y = _ref2.y, z = _ref2.z;
  return {
    l: Math.max(116 * y - 16, 0),
    a: 500 * (x - y),
    b: 200 * (y - z)
  };
};
var labToLch = function labToLch2(_ref3) {
  var l = _ref3.l, a = _ref3.a, b = _ref3.b;
  var h = (Math.atan2(b, a) * (180 / Math.PI) + 360) % 360;
  var c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
  if (Math.round(c * 1e4) === 0)
    h = Number.NaN;
  return {
    l,
    c,
    h
  };
};
var lchToLab = function lchToLab2(_ref4) {
  var l = _ref4.l, c = _ref4.c, h = _ref4.h;
  var convertH = Number.isNaN(h) ? 0 : h * (Math.PI / 180);
  return {
    l,
    a: Math.cos(convertH) * c,
    b: Math.sin(convertH) * c
  };
};
var labToXyz = function labToXyz2(_ref5) {
  var l = _ref5.l, a = _ref5.a, b = _ref5.b;
  var convertComponent = function convertComponent2(c) {
    return c > 0.206896552 ? Math.pow(c, 3) : 0.12841855 * (c - 0.137931034);
  };
  var y = (l + 16) / 116;
  var x = a / 500 + y;
  var z = y - b / 200;
  return {
    x: convertComponent(x) * 0.95047,
    y: convertComponent(y),
    z: convertComponent(z) * 1.08883
  };
};
var xyzToRgb = function xyzToRgb2(_ref6) {
  var x = _ref6.x, y = _ref6.y, z = _ref6.z;
  var convertComponent = function convertComponent2(c) {
    return 255 * (c <= 304e-5 ? 12.92 * c : 1.055 * Math.pow(c, 1 / 2.4) - 0.055);
  };
  return {
    r: clamp(convertComponent(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), 0, 255),
    g: clamp(convertComponent(-0.969266 * x + 1.8760108 * y + 0.041556 * z), 0, 255),
    b: clamp(convertComponent(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), 0, 255)
  };
};
var rgbToLch = function rgbToLch2(rgb) {
  return labToLch(xyzToLab(rgbToXyz(rgb)));
};
var lchToRgb = function lchToRgb2(lch) {
  return xyzToRgb(labToXyz(lchToLab(lch)));
};
var clampLightness = function clampLightness2(color, newPercent) {
  var rgb = rgbFromHex(color);
  if (rgb === null) {
    return color;
  }
  var lch = rgbToLch(rgb);
  lch.l = clamp(newPercent, 0, 100);
  return rgbToHex2(lchToRgb(lch));
};
var getLightness = function getLightness2(color) {
  var rgb = rgbFromHex(color);
  if (rgb === null) {
    return 0;
  }
  var lch = rgbToLch(rgb);
  return lch.l;
};
var getDarkModeLCHColor = function getDarkModeLCHColor2(currentBackgroundColor) {
  var lightness = getLightness(currentBackgroundColor);
  var newLightness = Math.abs(100 - lightness);
  return clampLightness(currentBackgroundColor, newLightness).toUpperCase();
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/mention.js
function ownKeys3(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread3(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys3(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys3(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var USER_TYPES = function(USER_TYPES2) {
  USER_TYPES2["DEFAULT"] = "DEFAULT";
  USER_TYPES2["SPECIAL"] = "SPECIAL";
  USER_TYPES2["APP"] = "APP";
  return USER_TYPES2;
}({});
var mention2 = mention({
  parseDOM: [{
    tag: "span[data-mention-id]",
    getAttrs: function getAttrs17(domNode) {
      var dom = domNode;
      var attrs = {
        id: dom.getAttribute("data-mention-id") || mention2.attrs.id.default,
        text: dom.textContent || mention2.attrs.text.default,
        accessLevel: dom.getAttribute("data-access-level") || mention2.attrs.accessLevel.default,
        localId: uuid.generate()
      };
      var userType = dom.getAttribute("data-user-type");
      if (USER_TYPES[userType]) {
        attrs.userType = userType;
      }
      return attrs;
    }
  }],
  toDOM: function toDOM17(node) {
    var _node$attrs = node.attrs, id = _node$attrs.id, accessLevel = _node$attrs.accessLevel, text3 = _node$attrs.text, userType = _node$attrs.userType, localId = _node$attrs.localId;
    var attrs = {
      "data-mention-id": id,
      "data-access-level": accessLevel,
      contenteditable: "false"
    };
    if (localId) {
      attrs["data-local-id"] = localId;
    }
    if (userType) {
      attrs["data-user-type"] = userType;
    }
    return ["span", attrs, text3];
  }
});
var isOptional = function isOptional2(key) {
  return ["userType", "localId"].indexOf(key) > -1;
};
var toJSON5 = function toJSON6(node) {
  return {
    attrs: Object.keys(node.attrs).reduce(function(obj, key) {
      if (isOptional(key) && !node.attrs[key]) {
        return obj;
      }
      return _objectSpread3(_objectSpread3({}, obj), {}, _defineProperty({}, key, node.attrs[key]));
    }, {})
  };
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/list-item.js
var listItem2 = listItemLegacy({
  parseDOM: [{
    tag: "li"
  }],
  toDOM: function toDOM18() {
    return ["li", 0];
  }
});
var listItemWithTask = listItem({
  parseDOM: [{
    tag: "li"
  }],
  toDOM: function toDOM19() {
    return ["li", 0];
  }
});
var listItemWithDecisionStage0 = listItemWithNestedDecisionStage0({
  parseDOM: [{
    tag: "li"
  }],
  toDOM: function toDOM20() {
    return ["li", 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/panel.js
function ownKeys4(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread4(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys4(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys4(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var PanelType = function(PanelType2) {
  PanelType2["INFO"] = "info";
  PanelType2["NOTE"] = "note";
  PanelType2["TIP"] = "tip";
  PanelType2["WARNING"] = "warning";
  PanelType2["ERROR"] = "error";
  PanelType2["SUCCESS"] = "success";
  PanelType2["CUSTOM"] = "custom";
  return PanelType2;
}({});
var getDomAttrs = function getDomAttrs2(nodeAttrs) {
  var attrs = {
    "data-panel-type": nodeAttrs.panelType,
    "data-panel-icon": nodeAttrs.panelIcon,
    "data-panel-icon-id": nodeAttrs.panelIconId,
    "data-panel-icon-text": nodeAttrs.panelIconText,
    "data-panel-color": nodeAttrs.panelColor
  };
  return attrs;
};
var getParseDOMAttrs = function getParseDOMAttrs2(allowCustomPanel, dom) {
  var parseDOMAttrs = {
    panelType: dom.getAttribute("data-panel-type")
  };
  if (allowCustomPanel) {
    parseDOMAttrs = _objectSpread4(_objectSpread4({}, parseDOMAttrs), {}, {
      panelIcon: dom.getAttribute("data-panel-icon"),
      panelIconId: dom.getAttribute("data-panel-icon-id"),
      panelIconText: dom.getAttribute("data-panel-icon-text"),
      panelColor: dom.getAttribute("data-panel-color")
    });
  } else {
    parseDOMAttrs.panelType = parseDOMAttrs.panelType === PanelType.CUSTOM ? PanelType.INFO : parseDOMAttrs.panelType;
  }
  return parseDOMAttrs;
};
var extendedPanel = function extendedPanel2(allowCustomPanel) {
  var panelNodeSpec = panel({
    parseDOM: [{
      tag: "div[data-panel-type]",
      getAttrs: function getAttrs58(dom) {
        return getParseDOMAttrs(allowCustomPanel, dom);
      }
    }],
    toDOM: function toDOM69(node) {
      var attrs = getDomAttrs(node.attrs);
      var contentAttrs = {
        "data-panel-content": "true"
      };
      return ["div", attrs, ["div", contentAttrs, 0]];
    }
  });
  return panelNodeSpec;
};
var panelWithBlockquoteStage0 = function panelWithBlockquoteStage02(allowCustomPanel) {
  var panelNodeSpec = panelWithNestedBlockquoteStage0({
    parseDOM: [{
      tag: "div[data-panel-type]",
      getAttrs: function getAttrs58(dom) {
        return getParseDOMAttrs(allowCustomPanel, dom);
      }
    }],
    toDOM: function toDOM69(node) {
      var attrs = getDomAttrs(node.attrs);
      var contentAttrs = {
        "data-panel-content": "true"
      };
      return ["div", attrs, ["div", contentAttrs, 0]];
    }
  });
  return panelNodeSpec;
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/text.js
var text2 = text({
  toDebugString: true ? void 0 : function() {
    return "text_node";
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/unknown-block.js
var name4 = "unknownBlock";
var unknown_block_default = {
  group: "block",
  content: "inline+",
  marks: "_",
  toDOM: function toDOM21() {
    return ["div", {
      "data-node-type": name4
    }, 0];
  },
  parseDOM: [{
    tag: 'div[data-node-type="'.concat(name4, '"]')
  }]
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/caption.js
var caption2 = caption({
  parseDOM: [{
    tag: "figcaption[data-caption]"
  }],
  toDOM: function toDOM22() {
    var attrs = {
      "data-caption": "true"
    };
    return ["figcaption", attrs, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/media.js
var defaultAttrs = media({}).attrs;
var createMediaSpec = function createMediaSpec2(attributes) {
  var inline = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var domNodeType = inline ? "span" : "div";
  var nodeName = inline ? "mediaInline" : "media";
  var parseDOM = [
    {
      tag: "".concat(domNodeType, '[data-node-type="').concat(nodeName, '"]'),
      getAttrs: function getAttrs58(dom) {
        var attrs = {};
        if (attributes) {
          Object.keys(attributes).forEach(function(k) {
            var key = camelCaseToKebabCase(k).replace(/^__/, "");
            var value = dom.getAttribute("data-".concat(key)) || "";
            if (value) {
              attrs[k] = value;
            }
          });
        }
        if (attrs.__fileSize) {
          attrs.__fileSize = +attrs.__fileSize;
        }
        var width = Number(attrs.width);
        if (typeof width !== "undefined" && !isNaN(width)) {
          attrs.width = width;
        }
        var height = Number(attrs.height);
        if (typeof height !== "undefined" && !isNaN(height)) {
          attrs.height = height;
        }
        return attrs;
      }
    },
    // Don't match data URI
    {
      tag: 'img[src^="data:image"]',
      ignore: true
    }
  ];
  var toDOM69 = function toDOM70(node) {
    var attrs = {
      "data-id": node.attrs.id,
      "data-node-type": "".concat(nodeName),
      "data-type": node.attrs.type,
      "data-collection": node.attrs.collection,
      "data-occurrence-key": node.attrs.occurrenceKey,
      "data-width": node.attrs.width,
      "data-height": node.attrs.height,
      "data-url": node.attrs.url,
      "data-alt": node.attrs.alt,
      // toDOM is used for static rendering as well as editor rendering. This comes into play for
      // emails, copy/paste, etc, so the title and styling here *is* useful (despite a React-based
      // node view being used for editing).
      title: "Attachment",
      // Manually kept in sync with the style of media cards. The goal is to render a plain gray
      // rectangle that provides an affordance for media.
      style: "display: inline-block; border-radius: 3px; background: ".concat(N30, "; box-shadow: 0 1px 1px rgba(9, 30, 66, 0.2), 0 0 1px 0 rgba(9, 30, 66, 0.24);")
    };
    copyPrivateAttributes(node.attrs, attrs, function(key) {
      return "data-".concat(camelCaseToKebabCase(key.slice(2)));
    });
    return ["".concat(domNodeType), attrs];
  };
  if (inline) {
    return mediaInline({
      parseDOM,
      toDOM: toDOM69
    });
  }
  return media({
    parseDOM: [].concat(parseDOM, [{
      // media-inline.ts uses this same function to generate the nodespec
      // this ensures that we don't make a media inline out of a copied image
      // https://product-fabric.atlassian.net/browse/EDM-2996
      tag: "img:not(.smart-link-icon)",
      getAttrs: function getAttrs58(dom) {
        return {
          type: "external",
          url: dom.getAttribute("src") || "",
          alt: dom.getAttribute("alt") || ""
        };
      }
    }]),
    toDOM: toDOM69
  });
};
var media2 = createMediaSpec(defaultAttrs, false);
var camelCaseToKebabCase = function camelCaseToKebabCase2(str) {
  return str.replace(/([^A-Z]+)([A-Z])/g, function(_, x, y) {
    return "".concat(x, "-").concat(y.toLowerCase());
  });
};
var copyPrivateAttributes = function copyPrivateAttributes2(from, to, map2) {
  if (media2.attrs) {
    Object.keys(media2.attrs).forEach(function(key) {
      if (key[0] === "_" && key[1] === "_" && from[key]) {
        to[map2 ? map2(key) : key] = from[key];
      }
    });
  }
};
var optionalAttributes = ["occurrenceKey", "width", "height", "url", "alt"];
var externalOnlyAttributes = ["type", "url", "width", "height", "alt"];
var toJSON7 = function toJSON8(node) {
  return {
    attrs: Object.keys(node.attrs).filter(function(key) {
      return !(key[0] === "_" && key[1] === "_");
    }).reduce(function(obj, key) {
      if (node.attrs.type === "external" && externalOnlyAttributes.indexOf(key) === -1) {
        return obj;
      }
      if (optionalAttributes.indexOf(key) > -1 && (node.attrs[key] === null || node.attrs[key] === "")) {
        return obj;
      }
      if (["width", "height"].indexOf(key) !== -1) {
        obj[key] = Number(node.attrs[key]);
        return obj;
      }
      obj[key] = node.attrs[key];
      return obj;
    }, {})
  };
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/media-group.js
var mediaGroup2 = mediaGroup({
  parseDOM: [{
    tag: 'div[data-node-type="mediaGroup"]'
  }, {
    tag: 'div[class="MediaGroup"]'
  }],
  toDOM: function toDOM23() {
    return ["div", {
      "data-node-type": "mediaGroup"
    }, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/media-inline.js
var mediaInline2 = createMediaSpec(mediaInline({}).attrs, true);

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/types/rich-media-common.js
var WidthType = function(WidthType2) {
  WidthType2["PIXEL"] = "pixel";
  WidthType2["PERCENTAGE"] = "percentage";
  return WidthType2;
}({});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/utils/parseDOM.js
var isDOMElement = function isDOMElement2(maybeNode) {
  return maybeNode instanceof Node && maybeNode.nodeType === Node.ELEMENT_NODE;
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/media-single.js
function ownKeys5(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread5(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys5(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys5(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var mediaSingleSpec = function mediaSingleSpec2(_ref) {
  var _ref$withCaption = _ref.withCaption, withCaption = _ref$withCaption === void 0 ? false : _ref$withCaption, _ref$withExtendedWidt = _ref.withExtendedWidthTypes, withExtendedWidthTypes = _ref$withExtendedWidt === void 0 ? false : _ref$withExtendedWidt;
  var getAttrs58 = function getAttrs59(dom) {
    if (!isDOMElement(dom)) {
      return {
        layout: "center"
      };
    }
    var layout = dom.getAttribute("data-layout") || "center";
    var width = Number(dom.getAttribute("data-width")) || null;
    var widthType = dom.getAttribute("data-width-type");
    if (withExtendedWidthTypes) {
      return {
        layout,
        width,
        widthType
      };
    } else if (widthType === WidthType.PIXEL) {
      return {
        layout
      };
    } else {
      return {
        layout,
        width
      };
    }
  };
  var getAttrsFromNode = function getAttrsFromNode2(node) {
    var _node$attrs = node.attrs, layout = _node$attrs.layout, width = _node$attrs.width;
    var attrs = {
      "data-node-type": "mediaSingle",
      "data-layout": layout,
      "data-width": ""
    };
    if (width) {
      attrs["data-width"] = isFinite(width) && Math.floor(width) === width ? width : width.toFixed(2);
    }
    if (withExtendedWidthTypes && node.attrs.widthType) {
      var widthType = node.attrs.widthType;
      return _objectSpread5(_objectSpread5({}, attrs), {}, {
        "data-width-type": widthType || WidthType.PERCENTAGE
      });
    }
    return attrs;
  };
  if (withExtendedWidthTypes && withCaption) {
    return mediaSingleFull({
      parseDOM: [{
        tag: 'div[data-node-type="mediaSingle"]',
        getAttrs: getAttrs58
      }],
      toDOM: function toDOM69(node) {
        return ["div", getAttrsFromNode(node), 0];
      }
    });
  }
  if (withExtendedWidthTypes && !withCaption) {
    return mediaSingleWidthType({
      parseDOM: [{
        tag: 'div[data-node-type="mediaSingle"]',
        getAttrs: getAttrs58
      }],
      toDOM: function toDOM69(node) {
        return ["div", getAttrsFromNode(node), 0];
      }
    });
  }
  if (!withExtendedWidthTypes && withCaption) {
    return mediaSingleCaption({
      parseDOM: [{
        tag: 'div[data-node-type="mediaSingle"]',
        getAttrs: getAttrs58
      }],
      toDOM: function toDOM69(node) {
        return ["div", getAttrsFromNode(node), 0];
      }
    });
  }
  return mediaSingle({
    parseDOM: [{
      tag: 'div[data-node-type="mediaSingle"]',
      getAttrs: getAttrs58
    }],
    toDOM: function toDOM69(node) {
      return ["div", getAttrsFromNode(node), 0];
    }
  });
};
var mediaSingle2 = mediaSingleSpec({
  withCaption: false,
  withExtendedWidthTypes: false
});
var mediaSingleWithCaption = mediaSingleSpec({
  withCaption: true,
  withExtendedWidthTypes: false
});
var mediaSingleWithWidthType = mediaSingleSpec({
  withCaption: false,
  withExtendedWidthTypes: true
});
var mediaSingleFull2 = mediaSingleSpec({
  withCaption: true,
  withExtendedWidthTypes: true
});
var toJSON9 = function toJSON10(node) {
  return {
    attrs: Object.keys(node.attrs).reduce(function(obj, key) {
      if (node.attrs[key] !== null) {
        obj[key] = node.attrs[key];
      }
      return obj;
    }, {})
  };
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/utils/editor-palette.js
function hexToEditorBorderPaletteColor(hexColor) {
  return editorBorderPalette[hexColor.toUpperCase()];
}
var editorBorderPalette = {
  /** gray - subtle */
  "#091E4224": "var(--ds-border, #091E4224)",
  /** gray */
  "#758195": "var(--ds-border-bold, #758195)",
  /** gray - bold */
  "#172B4D": "var(--ds-text, #172B4D)"
};
function hexToEditorTextPaletteColor(hexColor) {
  return editorTextPalette[hexColor.toUpperCase()];
}
var editorTextPalette = {
  /** blue - light */
  "#B3D4FF": "var(--ds-background-accent-blue-subtler, #B3D4FF)",
  /** blue - medium */
  "#4C9AFF": "var(--ds-icon-accent-blue, #4C9AFF)",
  /** blue - strong */
  "#0747A6": "var(--ds-text-accent-blue, #0747A6)",
  /** teal - light */
  "#B3F5FF": "var(--ds-background-accent-teal-subtler, #B3F5FF)",
  /** teal - medium */
  "#00B8D9": "var(--ds-icon-accent-teal, #00B8D9)",
  /** teal - strong */
  "#008DA6": "var(--ds-text-accent-teal, #008DA6)",
  /** green - light */
  "#ABF5D1": "var(--ds-background-accent-green-subtler, #ABF5D1)",
  /** green - medium */
  "#36B37E": "var(--ds-icon-accent-green, #36B37E)",
  /** green - strong */
  "#006644": "var(--ds-text-accent-green, #006644)",
  /** yellowOrange - light */
  "#FFF0B3": "var(--ds-background-accent-yellow-subtler, #FFF0B3)",
  /** yellowOrange - medium */
  "#FFC400": "var(--ds-background-accent-orange-subtle, #FFC400)",
  /** yellowOrange - strong */
  "#FF991F": "var(--ds-icon-accent-orange, #FF991F)",
  /** red - light */
  "#FFBDAD": "var(--ds-background-accent-red-subtler, #FFBDAD)",
  /** red - medium */
  "#FF5630": "var(--ds-icon-accent-red, #FF5630)",
  /** red - strong */
  "#BF2600": "var(--ds-text-accent-red, #BF2600)",
  /** purple - light */
  "#EAE6FF": "var(--ds-background-accent-purple-subtler, #EAE6FF)",
  /** purple - medium */
  "#6554C0": "var(--ds-icon-accent-purple, #6554C0)",
  /** purple - strong */
  "#403294": "var(--ds-text-accent-purple, #403294)",
  /** whiteGray - light */
  "#FFFFFF": "var(--ds-text-inverse, #FFFFFF)",
  /** whiteGray - medium */
  "#97A0AF": "var(--ds-icon-accent-gray, #97A0AF)",
  /** whiteGray - strong */
  "#172B4D": "var(--ds-text, #172B4D)"
};
function hexToEditorTextBackgroundPaletteColor(hexColor) {
  return textBackgroundColorPalette[hexColor.toUpperCase()];
}
var textBackgroundColorPalette = {
  /** Gray - light */
  "#DCDFE4": "var(--ds-background-accent-gray-subtler, #DCDFE4)",
  /** Teal - light */
  "#C6EDFB": "var(--ds-background-accent-teal-subtler, #C6EDFB)",
  /** Lime - light */
  "#D3F1A7": "var(--ds-background-accent-lime-subtler, #D3F1A7)",
  /** Orange - light */
  "#FEDEC8": "var(--ds-background-accent-orange-subtler, #FEDEC8)",
  /** Magenta - light */
  "#FDD0EC": "var(--ds-background-accent-magenta-subtler, #FDD0EC)",
  /** Purple - light */
  "#DFD8FD": "var(--ds-background-accent-purple-subtler, #DFD8FD)"
};
function hexToEditorBackgroundPaletteRawValue(hexColor) {
  var tokenData = editorBackgroundPalette[hexColor.toUpperCase()];
  return tokenData ? tokenData.getValue(hexColor) : void 0;
}
var editorBackgroundPalette = {
  /** blue - light */
  "#DEEBFF": {
    getValue: function getValue() {
      return "#DEEBFF";
    },
    token: "var(--ds-background-accent-blue-subtlest, #DEEBFF)"
  },
  /** blue - medium */
  "#B3D4FF": {
    getValue: function getValue2() {
      return "#B3D4FF";
    },
    token: "var(--ds-background-accent-blue-subtler, #B3D4FF)"
  },
  /** blue - strong */
  "#4C9AFF": {
    getValue: function getValue3() {
      return "#4C9AFF";
    },
    token: "var(--ds-background-accent-blue-subtle, #4C9AFF)"
  },
  /** teal - light */
  "#E6FCFF": {
    getValue: function getValue4() {
      return "#E6FCFF";
    },
    token: "var(--ds-background-accent-teal-subtlest, #E6FCFF)"
  },
  /** teal - medium */
  "#B3F5FF": {
    getValue: function getValue5() {
      return "#B3F5FF";
    },
    token: "var(--ds-background-accent-teal-subtler, #B3F5FF)"
  },
  /** teal - strong */
  "#79E2F2": {
    getValue: function getValue6() {
      return "#79E2F2";
    },
    token: "var(--ds-background-accent-teal-subtle, #79E2F2)"
  },
  /** green - light */
  "#E3FCEF": {
    getValue: function getValue7() {
      return "#E3FCEF";
    },
    token: "var(--ds-background-accent-green-subtlest, #E3FCEF)"
  },
  /** green - medium */
  "#ABF5D1": {
    getValue: function getValue8() {
      return "#ABF5D1";
    },
    token: "var(--ds-background-accent-green-subtler, #ABF5D1)"
  },
  /** green - strong */
  "#57D9A3": {
    getValue: function getValue9() {
      return "#57D9A3";
    },
    token: "var(--ds-background-accent-green-subtle, #57D9A3)"
  },
  /** yellowOrange - light */
  "#FFFAE6": {
    getValue: function getValue10() {
      return "#FFFAE6";
    },
    token: "var(--ds-background-accent-yellow-subtlest, #FFFAE6)"
  },
  /** yellowOrange - medium */
  "#FFF0B3": {
    getValue: function getValue11() {
      return "#FFF0B3";
    },
    token: "var(--ds-background-accent-yellow-subtler, #FFF0B3)"
  },
  /** yellowOrange - strong */
  "#FFC400": {
    getValue: function getValue12() {
      return "#FFC400";
    },
    token: "var(--ds-background-accent-orange-subtle, #FFC400)"
  },
  /** red - light */
  "#FFEBE6": {
    getValue: function getValue13() {
      return "#FFEBE6";
    },
    token: "var(--ds-background-accent-red-subtlest, #FFEBE6)"
  },
  /** red - medium */
  "#FFBDAD": {
    getValue: function getValue14() {
      return "#FFBDAD";
    },
    token: "var(--ds-background-accent-red-subtler, #FFBDAD)"
  },
  /** red - strong */
  "#FF8F73": {
    getValue: function getValue15() {
      return "#FF8F73";
    },
    token: "var(--ds-background-accent-red-subtle, #FF8F73)"
  },
  /** purple - light */
  "#EAE6FF": {
    getValue: function getValue16() {
      return "#EAE6FF";
    },
    token: "var(--ds-background-accent-purple-subtlest, #EAE6FF)"
  },
  /** purple - medium */
  "#C0B6F2": {
    getValue: function getValue17() {
      return "#C0B6F2";
    },
    token: "var(--ds-background-accent-purple-subtler, #C0B6F2)"
  },
  /** purple - strong */
  "#998DD9": {
    getValue: function getValue18() {
      return "#998DD9";
    },
    token: "var(--ds-background-accent-purple-subtle, #998DD9)"
  },
  /** whiteGray - light */
  "#FFFFFF": {
    getValue: function getValue19() {
      return "#FFFFFF";
    },
    token: "var(--ds-surface, #FFFFFF)"
  },
  /** whiteGray - medium */
  "#F4F5F7": {
    getValue: function getValue20() {
      return "#F4F5F7";
    },
    token: "var(--ds-background-accent-gray-subtlest, #F4F5F7)"
  },
  /** whiteGray - strong */
  "#B3BAC5": {
    getValue: function getValue21() {
      return "#B3BAC5";
    },
    token: "var(--ds-background-accent-gray-subtle, #B3BAC5)"
  }
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/tableNodes.js
function ownKeys6(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread6(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys6(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys6(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var tablePrefixSelector = "pm-table";
var tableCellSelector = "".concat(tablePrefixSelector, "-cell-content-wrap");
var tableHeaderSelector = "".concat(tablePrefixSelector, "-header-content-wrap");
var tableCellContentWrapperSelector = "".concat(tablePrefixSelector, "-cell-nodeview-wrapper");
var tableCellContentDomSelector = "".concat(tablePrefixSelector, "-cell-nodeview-content-dom");
var DEFAULT_TABLE_HEADER_CELL_BACKGROUND = N20.toLocaleLowerCase();
var getCellAttrs = function getCellAttrs2(dom) {
  var defaultValues = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var widthAttr = dom.getAttribute("data-colwidth");
  var width = widthAttr && /^\d+(,\d+)*$/.test(widthAttr) ? widthAttr.split(",").map(function(str) {
    return Number(str);
  }) : null;
  var colspan = Number(dom.getAttribute("colspan") || 1);
  var backgroundColor3 = dom.style.backgroundColor;
  var dataCellBackground = dom.getAttribute("data-cell-background");
  var dataCellBackgroundHexCode = dataCellBackground && isHex(dataCellBackground) ? dataCellBackground : void 0;
  if (backgroundColor3.includes("--ds-background-neutral")) {
    backgroundColor3 = "";
  } else {
    if (backgroundColor3 && isRgb(backgroundColor3)) {
      var result = rgbToHex(backgroundColor3);
      if (result !== null) {
        backgroundColor3 = result;
      }
    }
  }
  var backgroundHexCode = dataCellBackgroundHexCode || (backgroundColor3 && backgroundColor3 !== defaultValues["background"] ? backgroundColor3 : null);
  return {
    colspan,
    rowspan: Number(dom.getAttribute("rowspan") || 1),
    colwidth: width && width.length === colspan ? width : null,
    background: backgroundHexCode
  };
};
var testGlobalTheme;
var getGlobalTheme = function getGlobalTheme2() {
  if (testGlobalTheme) {
    return {
      colorMode: testGlobalTheme
    };
  }
  var element = document.documentElement;
  var colorMode = element.getAttribute("data-color-mode") || "";
  return {
    colorMode
  };
};
var cssVariablePattern = /^var\(--.*\)$/;
var getCellDomAttrs = function getCellDomAttrs2(node) {
  var attrs = {};
  var nodeType = node.type.name;
  if (node.attrs.colspan !== 1) {
    attrs.colspan = node.attrs.colspan;
  }
  if (node.attrs.rowspan !== 1) {
    attrs.rowspan = node.attrs.rowspan;
  }
  if (node.attrs.colwidth) {
    attrs["data-colwidth"] = node.attrs.colwidth.join(",");
  }
  if (node.attrs.background) {
    var background = node.attrs.background;
    var ignored = nodeType === "tableHeader" && background === tableBackgroundColorNames.get("light gray") || nodeType === "tableCell" && background === tableBackgroundColorNames.get("white") || nodeType === "tableHeader" && background.includes("--ds-background-neutral");
    if (ignored) {
      attrs.style = "";
    } else {
      var color = isRgb(background) && rgbToHex(background) ? rgbToHex(background) : background;
      var tokenColor = hexToEditorBackgroundPaletteRawValue(color);
      if (tokenColor) {
        attrs.style = "background-color: ".concat(tokenColor, ";");
      } else if (
        /**
         * There was previously a bug in dark mode where we would attempt to invert
         * a design token in `getDarkModeLCHColor` causing issues.
         * If it's a design token we should return it as is.
         */
        cssVariablePattern.test(color)
      ) {
        attrs.style = "background-color: ".concat(color, ";");
      } else {
        if (getGlobalTheme().colorMode === "dark") {
          attrs.style = "background-color: ".concat(getDarkModeLCHColor(color), ";");
        } else {
          attrs.style = "background-color: ".concat(background, ";");
        }
      }
      if (color) {
        attrs["data-cell-background"] = color;
      }
      attrs.colorname = tableBackgroundColorPalette.get(color);
    }
  }
  if (nodeType === "tableHeader") {
    attrs.class = tableHeaderSelector;
  } else {
    attrs.class = tableCellSelector;
  }
  return attrs;
};
var tableBackgroundColorPalette = /* @__PURE__ */ new Map();
var tableBackgroundBorderColor = hexToRgba(N800, 0.12) || N0;
var tableBackgroundColorNames = /* @__PURE__ */ new Map();
[[N0, "White"], [B50, "Light blue"], [T50, "Light teal"], [G50, "Light green"], [Y50, "Light yellow"], [R50, "Light red"], [P50, "Light purple"], [N20, "Light gray"], [B75, "Blue"], [T75, "Teal"], [G75, "Green"], [Y75, "Yellow"], [R75, "Red"], [P75, "Purple"], [N60, "Gray"], [B100, "Dark blue"], [T100, "Dark teal"], [G200, "Dark green"], [Y200, "Dark yellow"], [R100, "Dark red"], [P100, "Dark purple"]].forEach(function(_ref) {
  var _ref2 = _slicedToArray(_ref, 2), colorValue = _ref2[0], colorName = _ref2[1];
  tableBackgroundColorPalette.set(colorValue.toLowerCase(), colorName);
  tableBackgroundColorNames.set(colorName.toLowerCase(), colorValue.toLowerCase());
});
var createTableSpec = function createTableSpec2() {
  return table({
    parseDOM: [{
      tag: "table",
      getAttrs: function getAttrs58(node) {
        var _dom$parentElement;
        var dom = node;
        var breakoutWrapper = (_dom$parentElement = dom.parentElement) === null || _dom$parentElement === void 0 ? void 0 : _dom$parentElement.parentElement;
        return {
          isNumberColumnEnabled: dom.getAttribute("data-number-column") === "true",
          layout: (
            // copying from editor
            dom.getAttribute("data-layout") || // copying from renderer
            (breakoutWrapper === null || breakoutWrapper === void 0 ? void 0 : breakoutWrapper.getAttribute("data-layout")) || "default"
          ),
          __autoSize: dom.getAttribute("data-autosize") === "true",
          localId: dom.getAttribute("data-table-local-id") || uuid.generate(),
          width: Number(dom.getAttribute("data-table-width")) || null,
          displayMode: dom.getAttribute("data-table-display-mode") || null
        };
      }
    }],
    toDOM: function toDOM69(node) {
      var attrs = {
        "data-number-column": node.attrs.isNumberColumnEnabled,
        "data-layout": node.attrs.layout,
        "data-autosize": node.attrs.__autoSize,
        "data-table-local-id": node.attrs.localId,
        "data-table-width": node.attrs.width,
        "data-table-display-mode": node.attrs.displayMode
      };
      return ["table", attrs, ["tbody", 0]];
    }
  });
};
var table2 = createTableSpec();
var tableWithCustomWidth = createTableSpec();
var tableStage0 = createTableSpec();
var shouldIncludeAttribute = function shouldIncludeAttribute2(key, value) {
  return !key.startsWith("__") && (key !== "localId" || !!value);
};
var tableToJSON = function tableToJSON2(node) {
  return {
    attrs: Object.keys(node.attrs).filter(function(key) {
      return shouldIncludeAttribute(key, node.attrs[key]);
    }).reduce(function(obj, key) {
      return _objectSpread6(_objectSpread6({}, obj), {}, _defineProperty({}, key, node.attrs[key]));
    }, {})
  };
};
var tableRow2 = tableRow({
  parseDOM: [{
    tag: "tr"
  }],
  toDOM: function toDOM24() {
    return ["tr", 0];
  }
});
var cellAttrs = {
  colspan: {
    default: 1
  },
  rowspan: {
    default: 1
  },
  colwidth: {
    default: null
  },
  background: {
    default: null
  }
};
var tableCell2 = tableCell({
  parseDOM: [
    // Ignore number cell copied from renderer
    {
      tag: ".ak-renderer-table-number-column",
      ignore: true
    },
    {
      tag: "td",
      getAttrs: function getAttrs18(dom) {
        return getCellAttrs(dom);
      }
    }
  ],
  toDOM: function toDOM25(node) {
    return ["td", getCellDomAttrs(node), 0];
  }
});
var toJSONTableCell = function toJSONTableCell2(node) {
  return {
    attrs: Object.keys(node.attrs).reduce(function(obj, key) {
      if (cellAttrs[key].default !== node.attrs[key]) {
        obj[key] = node.attrs[key];
      }
      return obj;
    }, {})
  };
};
var tableHeader2 = tableHeader({
  parseDOM: [{
    tag: "th",
    getAttrs: function getAttrs19(dom) {
      return getCellAttrs(dom, {
        background: DEFAULT_TABLE_HEADER_CELL_BACKGROUND
      });
    }
  }],
  toDOM: function toDOM26(node) {
    return ["th", getCellDomAttrs(node), 0];
  }
});
var toJSONTableHeader = toJSONTableCell;

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/decision-list.js
var name5 = "decisionList";
var decisionListSelector = '[data-node-type="'.concat(name5, '"]');
var decisionList2 = decisionList({
  parseDOM: [{
    tag: "ol".concat(decisionListSelector),
    // Default priority is 50. We normally don't change this but since this node type is
    // also used by ordered-list we need to make sure that we run this parser first.
    priority: 100,
    getAttrs: function getAttrs20() {
      return {
        localId: uuid.generate()
      };
    }
  }],
  toDOM: function toDOM27(node) {
    var localId = node.attrs.localId;
    var attrs = {
      "data-node-type": name5,
      "data-decision-list-local-id": localId || "local-decision-list",
      style: "list-style: none; padding-left: 0"
    };
    return ["ol", attrs, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/decision-item.js
var decisionItem2 = decisionItem({
  parseDOM: [{
    tag: "li[data-decision-local-id]",
    // Default priority is 50. We normally don't change this but since this node type is
    // also used by list-item we need to make sure that we run this parser first.
    priority: 100,
    getAttrs: function getAttrs21(dom) {
      return {
        localId: uuid.generate(),
        state: dom.getAttribute("data-decision-state")
      };
    }
  }],
  toDOM: function toDOM28(node) {
    var _node$attrs = node.attrs, localId = _node$attrs.localId, state = _node$attrs.state;
    var attrs = {
      "data-decision-local-id": localId || "local-decision",
      "data-decision-state": state
    };
    return ["li", attrs, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/task-list.js
var name6 = "actionList";
var taskListSelector = '[data-node-type="'.concat(name6, '"]');
var taskList2 = taskList({
  parseDOM: [{
    tag: "div".concat(taskListSelector),
    // Default priority is 50. We normally don't change this but since this node type is
    // also used by ordered-list we need to make sure that we run this parser first.
    priority: 100,
    getAttrs: function getAttrs22() {
      return {
        localId: uuid.generate()
      };
    }
  }],
  toDOM: function toDOM29(node) {
    var localId = node.attrs.localId;
    var attrs = {
      "data-node-type": name6,
      "data-task-list-local-id": localId || "local-task-list",
      style: "list-style: none; padding-left: 0"
    };
    return ["div", attrs, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/task-item.js
var taskItem2 = taskItem({
  parseDOM: [{
    tag: "div[data-task-local-id]",
    // Default priority is 50. We normally don't change this but since this node type is
    // also used by list-item we need to make sure that we run this parser first.
    priority: 100,
    getAttrs: function getAttrs23(dom) {
      return {
        localId: uuid.generate(),
        state: dom.getAttribute("data-task-state") || "TODO"
      };
    }
  }],
  toDOM: function toDOM30(node) {
    var _node$attrs = node.attrs, localId = _node$attrs.localId, state = _node$attrs.state;
    var attrs = {
      "data-task-local-id": localId || "local-task",
      "data-task-state": state || "TODO"
    };
    return ["div", attrs, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/date.js
var date2 = date({
  parseDOM: [{
    tag: 'span[data-node-type="date"]',
    getAttrs: function getAttrs24(dom) {
      return {
        timestamp: dom.getAttribute("data-timestamp")
      };
    }
  }],
  toDOM: function toDOM31(node) {
    var attrs = {
      "data-node-type": "date",
      "data-timestamp": node.attrs.timestamp
    };
    return ["span", attrs];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/placeholder.js
var placeholder2 = placeholder({
  parseDOM: [{
    tag: "span[data-placeholder]",
    getAttrs: function getAttrs25(dom) {
      return {
        text: dom.getAttribute("data-placeholder") || placeholder2.attrs.text.default
      };
    }
  }],
  toDOM: function toDOM32(node) {
    var text3 = node.attrs.text;
    var attrs = {
      "data-placeholder": text3,
      // Needs to be edtiable for mobile to not close keyboard
      contenteditable: "true"
    };
    return ["span", attrs, text3];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/layout-section.js
var layoutSection2 = layoutSection({
  parseDOM: [{
    context: "layoutSection//|layoutColumn//",
    tag: "div[data-layout-section]",
    skip: true
  }, {
    tag: "div[data-layout-section]"
  }],
  toDOM: function toDOM33() {
    var attrs = {
      "data-layout-section": "true"
    };
    return ["div", attrs, 0];
  }
});
var layoutSectionFull2 = layoutSectionFull({
  parseDOM: [{
    context: "layoutSection//|layoutColumn//",
    tag: "div[data-layout-section]",
    skip: true
  }, {
    tag: "div[data-layout-section]"
  }],
  toDOM: function toDOM34() {
    var attrs = {
      "data-layout-section": "true"
    };
    return ["div", attrs, 0];
  }
});
var layoutSectionWithSingleColumn = layoutSection({
  parseDOM: [{
    context: "layoutSection//|layoutColumn//",
    tag: "div[data-layout-section]",
    skip: true
  }, {
    tag: "div[data-layout-section]"
  }],
  toDOM: function toDOM35() {
    var attrs = {
      "data-layout-section": "true"
    };
    return ["div", attrs, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/layout-column.js
var layoutColumn2 = layoutColumn({
  parseDOM: [{
    context: "layoutColumn//",
    tag: "div[data-layout-column]",
    skip: true
  }, {
    tag: "div[data-layout-column]",
    getAttrs: function getAttrs26(domNode) {
      var dom = domNode;
      return {
        width: Number(dom.getAttribute("data-column-width")) || void 0
      };
    }
  }],
  toDOM: function toDOM36(node) {
    var attrs = {
      "data-layout-column": "true"
    };
    var width = node.attrs.width;
    if (width) {
      attrs["style"] = "flex-basis: ".concat(width, "%");
      attrs["data-column-width"] = "".concat(width);
    }
    var contentAttrs = {
      "data-layout-content": "true"
    };
    return ["div", attrs, ["div", contentAttrs, 0]];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/inline-card.js
var inlineCard2 = inlineCard({
  parseDOM: [
    {
      tag: "a[data-inline-card], span[data-inline-card]",
      // bump priority higher than hyperlink
      priority: 100,
      getAttrs: function getAttrs27(dom) {
        var anchor = dom;
        var data = anchor.getAttribute("data-card-data");
        return {
          url: anchor.getAttribute("href") || anchor.getAttribute("data-card-url") || null,
          data: data ? JSON.parse(data) : null
        };
      }
    },
    // for renderer
    {
      tag: "div[data-inline-card]",
      getAttrs: function getAttrs28(dom) {
        var anchor = dom;
        var data = anchor.getAttribute("data-card-data");
        return {
          url: anchor.getAttribute("data-card-url"),
          data: data ? JSON.parse(data) : null
        };
      }
    }
  ],
  toDOM: function toDOM37(node) {
    var attrs = {
      "data-inline-card": "",
      href: node.attrs.url || "",
      "data-card-data": node.attrs.data ? JSON.stringify(node.attrs.data) : ""
    };
    if (node.attrs.url) {
      return ["a", attrs, node.attrs.url];
    } else {
      return ["a", attrs];
    }
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/block-card.js
function ownKeys7(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread7(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys7(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys7(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var getCommonAttributesFromDom = function getCommonAttributesFromDom2(dom) {
  var anchor = dom;
  var data = anchor.getAttribute("data-card-data");
  var datasource = anchor.getAttribute("data-datasource");
  return {
    data: data ? JSON.parse(data) : void 0,
    layout: datasource ? dom.getAttribute("data-layout") || void 0 : void 0,
    width: Number(dom.getAttribute("data-width")) || void 0,
    datasource: datasource ? JSON.parse(datasource) : void 0
  };
};
var blockCard2 = blockCard({
  parseDOM: [{
    tag: "a[data-block-card]",
    // bump priority higher than hyperlink
    priority: 100,
    getAttrs: function getAttrs29(dom) {
      var anchor = dom;
      return _objectSpread7({
        url: anchor.getAttribute("href") || void 0
      }, getCommonAttributesFromDom(dom));
    }
  }, {
    tag: "div[data-block-card]",
    getAttrs: function getAttrs30(dom) {
      var anchor = dom;
      return _objectSpread7({
        url: anchor.getAttribute("data-card-url") || void 0
      }, getCommonAttributesFromDom(dom));
    }
  }],
  toDOM: function toDOM38(node) {
    var _node$attrs;
    var _ref = node.attrs, url = _ref.url;
    var _ref2 = node.attrs, data = _ref2.data;
    var _ref3 = node.attrs, layout = _ref3.layout, width = _ref3.width, datasource = _ref3.datasource;
    var attrs = {
      "data-block-card": "",
      href: url || "",
      "data-card-data": data ? JSON.stringify(data) : "",
      "data-datasource": datasource ? JSON.stringify(datasource) : "",
      "data-layout": layout,
      "data-width": "".concat(width)
    };
    return ["a", attrs, (node === null || node === void 0 ? void 0 : (_node$attrs = node.attrs) === null || _node$attrs === void 0 ? void 0 : _node$attrs.url) || " "];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/unsupported-block.js
var unsupportedBlock2 = unsupportedBlock({
  parseDOM: [{
    tag: '[data-node-type="unsupportedBlock"]',
    getAttrs: function getAttrs31(dom) {
      return {
        originalValue: JSON.parse(dom.getAttribute("data-original-value") || "{}")
      };
    }
  }],
  toDOM: function toDOM39(node) {
    var attrs = {
      "data-node-type": "unsupportedBlock",
      "data-original-value": JSON.stringify(node.attrs.originalValue)
    };
    return ["div", attrs, "Unsupported content"];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/unsupported-inline.js
var unsupportedInline2 = unsupportedInline({
  parseDOM: [{
    tag: '[data-node-type="unsupportedInline"]',
    getAttrs: function getAttrs32(dom) {
      return {
        originalValue: JSON.parse(dom.getAttribute("data-original-value") || "{}")
      };
    }
  }],
  toDOM: function toDOM40(node) {
    var attrs = {
      "data-node-type": "unsupportedInline",
      "data-original-value": JSON.stringify(node.attrs.originalValue)
    };
    return ["span", attrs, "Unsupported content"];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/status.js
var status2 = status({
  parseDOM: [{
    tag: 'span[data-node-type="status"]',
    getAttrs: function getAttrs33(domNode) {
      var dom = domNode;
      return {
        text: dom.textContent.replace(/\n/, "").trim(),
        color: dom.getAttribute("data-color"),
        localId: uuid.generate(),
        style: dom.getAttribute("data-style")
      };
    }
  }],
  toDOM: function toDOM41(node) {
    var _node$attrs = node.attrs, text3 = _node$attrs.text, color = _node$attrs.color, localId = _node$attrs.localId, style = _node$attrs.style;
    var attrs = {
      "data-node-type": "status",
      "data-color": color,
      "data-local-id": localId,
      "data-style": style,
      contenteditable: "false"
    };
    return ["span", attrs, text3];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/nested-expand.js
var nestedExpand2 = nestedExpand({
  parseDOM: [{
    context: "nestedExpand//",
    tag: '[data-node-type="nestedExpand"]',
    skip: true
  }, {
    tag: '[data-node-type="nestedExpand"] button',
    ignore: true
  }, {
    tag: '[data-node-type="expand"] button',
    ignore: true
  }, {
    tag: 'div[data-node-type="nestedExpand"]',
    getAttrs: function getAttrs34(domNode) {
      var dom = domNode;
      return {
        title: dom.getAttribute("data-title"),
        __expanded: true
      };
    }
  }],
  toDOM: function toDOM42(node) {
    var attrs = {
      "data-node-type": "nestedExpand",
      "data-title": node.attrs.title,
      "data-expanded": node.attrs.__expanded
    };
    return ["div", attrs, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/embed-card.js
var embedCard2 = embedCard({
  parseDOM: [{
    tag: "div[data-embed-card]",
    getAttrs: function getAttrs35(dom) {
      return {
        url: dom.getAttribute("data-card-url"),
        layout: dom.getAttribute("data-layout") || "center",
        width: Number(dom.getAttribute("data-width")) || null,
        originalWidth: Number(dom.getAttribute("data-card-original-width")) || null,
        originalHeight: Number(dom.getAttribute("data-card-original-height")) || null
      };
    }
  }],
  toDOM: function toDOM43(node) {
    var _node$attrs = node.attrs, url = _node$attrs.url, layout = _node$attrs.layout, width = _node$attrs.width, originalWidth = _node$attrs.originalWidth, originalHeight = _node$attrs.originalHeight;
    var attrs = {
      "data-embed-card": "",
      "data-card-url": url,
      "data-layout": layout,
      "data-width": width,
      "data-original-width": originalWidth,
      "data-original-height": originalHeight
    };
    return ["div", attrs];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/utils/extensions.js
var isValidLayout = function isValidLayout2(name7) {
  return !!name7 && ["default", "wide", "full-width"].includes(name7);
};
var getExtensionAttrs = function getExtensionAttrs2(dom) {
  var isInline = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var extensionType = dom.getAttribute("data-extension-type");
  var extensionKey = dom.getAttribute("data-extension-key");
  if (!extensionType || !extensionKey) {
    return false;
  }
  var attrs = {
    extensionType,
    extensionKey,
    text: dom.getAttribute("data-text") || void 0,
    parameters: JSON.parse(dom.getAttribute("data-parameters") || "{}"),
    localId: dom.getAttribute("data-local-id") || void 0
  };
  if (!isInline) {
    var rawLayout = dom.getAttribute("data-layout");
    attrs.layout = isValidLayout(rawLayout) ? rawLayout : "default";
  }
  return attrs;
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/extension.js
var extension2 = extension({
  parseDOM: [{
    tag: '[data-node-type="extension"]',
    getAttrs: function getAttrs36(domNode) {
      return getExtensionAttrs(domNode);
    }
  }],
  toDOM: function toDOM44(node) {
    var attrs = {
      "data-node-type": "extension",
      "data-extension-type": node.attrs.extensionType,
      "data-extension-key": node.attrs.extensionKey,
      "data-text": node.attrs.text,
      "data-parameters": JSON.stringify(node.attrs.parameters),
      "data-layout": node.attrs.layout,
      "data-local-id:": node.attrs.localId
    };
    return ["div", attrs];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/inline-extension.js
var inlineExtension2 = inlineExtensionWithMarks({
  parseDOM: [{
    tag: "span[data-extension-type]",
    getAttrs: function getAttrs37(domNode) {
      return getExtensionAttrs(domNode, true);
    }
  }],
  toDOM: function toDOM45(node) {
    var attrs = {
      "data-extension-type": node.attrs.extensionType,
      "data-extension-key": node.attrs.extensionKey,
      "data-text": node.attrs.text,
      "data-parameters": JSON.stringify(node.attrs.parameters),
      "data-local-id:": node.attrs.localId,
      contenteditable: "false"
    };
    return ["span", attrs];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/bodied-extension.js
var bodiedExtension2 = bodiedExtension({
  parseDOM: [{
    context: "bodiedExtension//",
    tag: '[data-node-type="bodied-extension"]',
    skip: true
  }, {
    tag: '[data-node-type="bodied-extension"]',
    getAttrs: function getAttrs38(domNode) {
      return getExtensionAttrs(domNode);
    }
  }],
  toDOM: function toDOM46(node) {
    var attrs = {
      "data-node-type": "bodied-extension",
      "data-extension-type": node.attrs.extensionType,
      "data-extension-key": node.attrs.extensionKey,
      "data-text": node.attrs.text,
      "data-parameters": JSON.stringify(node.attrs.parameters),
      "data-layout": node.attrs.layout,
      "data-local-id:": node.attrs.localId
    };
    return ["div", attrs, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/nodes/multi-bodied-extension.js
var extensionFrame = extensionFrameStage0({
  parseDOM: [{
    context: "extensionFrame//",
    tag: "div[data-extension-frame]",
    skip: true
  }, {
    tag: "div[data-extension-frame]"
  }],
  toDOM: function toDOM47() {
    var attrs = {
      "data-extension-frame": "true"
    };
    return ["div", attrs, 0];
  }
});
var multiBodiedExtension = multiBodiedExtensionStage0({
  parseDOM: [{
    context: "multiBodiedExtension//",
    tag: '[data-node-type="multi-bodied-extension"]',
    skip: true
  }, {
    tag: '[data-node-type="multi-bodied-extension"]',
    getAttrs: function getAttrs39(domNode) {
      return getExtensionAttrs(domNode);
    }
  }],
  toDOM: function toDOM48(node) {
    var attrs = {
      "data-node-type": "multi-bodied-extension",
      "data-extension-type": node.attrs.extensionType,
      "data-extension-key": node.attrs.extensionKey,
      "data-text": node.attrs.text,
      "data-parameters": JSON.stringify(node.attrs.parameters),
      "data-layout": node.attrs.layout,
      "data-local-id:": node.attrs.localId
    };
    return ["div", attrs, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/next-schema/generated/markTypes.js
var alignment = createPMMarkSpecFactory({
  attrs: {
    align: {}
  },
  excludes: "alignment indentation",
  group: "alignment"
});
var annotation = createPMMarkSpecFactory({
  attrs: {
    id: {
      default: ""
    },
    annotationType: {
      default: "inlineComment"
    }
  },
  inclusive: true,
  excludes: "",
  group: "annotation"
});
var backgroundColor = createPMMarkSpecFactory({
  attrs: {
    color: {}
  },
  inclusive: true,
  excludes: "color",
  group: "color"
});
var border = createPMMarkSpecFactory({
  attrs: {
    size: {},
    color: {}
  },
  inclusive: false
});
var breakout = createPMMarkSpecFactory({
  attrs: {
    mode: {
      default: "wide"
    }
  },
  inclusive: false,
  spanning: false
});
var code = createPMMarkSpecFactory({
  inclusive: true,
  excludes: "fontStyle link searchQuery color"
});
var confluenceInlineComment = createPMMarkSpecFactory({
  attrs: {
    reference: {
      default: ""
    }
  },
  inclusive: false,
  excludes: ""
});
var dataConsumer = createPMMarkSpecFactory({
  attrs: {
    sources: {
      default: []
    }
  }
});
var em = createPMMarkSpecFactory({
  inclusive: true,
  group: "fontStyle"
});
var fragment = createPMMarkSpecFactory({
  attrs: {
    localId: {
      default: ""
    },
    name: {
      default: null
    }
  },
  inclusive: false,
  excludes: ""
});
var indentation = createPMMarkSpecFactory({
  attrs: {
    level: {}
  },
  excludes: "indentation alignment",
  group: "indentation"
});
var link = createPMMarkSpecFactory({
  attrs: {
    href: {},
    __confluenceMetadata: {
      default: null
    }
  },
  inclusive: false,
  excludes: "link",
  group: "link"
});
var strike = createPMMarkSpecFactory({
  inclusive: true,
  group: "fontStyle"
});
var strong = createPMMarkSpecFactory({
  inclusive: true,
  group: "fontStyle"
});
var subsup = createPMMarkSpecFactory({
  attrs: {
    type: {
      default: "sub"
    }
  },
  inclusive: true,
  group: "fontStyle"
});
var textColor = createPMMarkSpecFactory({
  attrs: {
    color: {}
  },
  inclusive: true,
  group: "color"
});
var typeAheadQuery = createPMMarkSpecFactory({
  attrs: {
    trigger: {
      default: ""
    }
  },
  inclusive: true,
  group: "searchQuery"
});
var underline = createPMMarkSpecFactory({
  inclusive: true,
  group: "fontStyle"
});
var unsupportedMark = createPMMarkSpecFactory({
  attrs: {
    originalValue: {}
  },
  excludes: ""
});
var unsupportedNodeAttribute = createPMMarkSpecFactory({
  attrs: {
    unsupported: {},
    type: {}
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/em.js
var emDOM = ["em"];
var em2 = em({
  parseDOM: [{
    tag: "i"
  }, {
    tag: "em"
  }, {
    style: "font-style=italic"
  }],
  toDOM: function toDOM49() {
    return emDOM;
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/code.js
var code2 = code({
  parseDOM: [{
    tag: "span.code",
    preserveWhitespace: true
  }, {
    tag: "code",
    preserveWhitespace: true
  }, {
    tag: "tt",
    preserveWhitespace: true
  }, {
    tag: "span",
    preserveWhitespace: true,
    getAttrs: function getAttrs40(domNode) {
      var dom = domNode;
      if (dom.style.whiteSpace === "pre") {
        return {};
      }
      if (dom.style.fontFamily && dom.style.fontFamily.toLowerCase().indexOf("monospace") >= 0) {
        return {};
      }
      return false;
    }
  }],
  toDOM: function toDOM50() {
    return ["span", {
      class: "code",
      spellcheck: "false"
    }];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/strike.js
var strike2 = strike({
  parseDOM: [{
    tag: "strike"
  }, {
    tag: "s"
  }, {
    tag: "del"
  }, {
    style: "text-decoration",
    getAttrs: function getAttrs41(value) {
      return value === "line-through" && null;
    }
  }],
  toDOM: function toDOM51() {
    return ["s"];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/strong.js
var strongDOM = ["strong"];
var strong2 = strong({
  parseDOM: [
    {
      tag: "strong"
    },
    // This works around a Google Docs misbehavior where
    // pasted content will be inexplicably wrapped in `<b>`
    // tags with a font-weight normal.
    {
      tag: "b",
      getAttrs: function getAttrs42(node) {
        var element = node;
        return element.style.fontWeight !== "normal" && null;
      }
    },
    {
      tag: "span",
      getAttrs: function getAttrs43(node) {
        var element = node;
        var fontWeight = element.style.fontWeight;
        return typeof fontWeight === "string" && (fontWeight === "bold" || fontWeight === "bolder" || /^(bold(er)?|[5-9]\d{2,})$/.test(fontWeight)) && null;
      }
    }
  ],
  toDOM: function toDOM52() {
    return strongDOM;
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/underline.js
var underline2 = underline({
  parseDOM: [{
    tag: "u"
  }, {
    style: "text-decoration",
    getAttrs: function getAttrs44(value) {
      return value === "underline" && null;
    }
  }],
  toDOM: function toDOM53() {
    return ["u"];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/link.js
function ownKeys8(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread8(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys8(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys8(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var getLinkAttrs = function getLinkAttrs2(attribute) {
  return function(domNode) {
    var dom = domNode;
    var href = dom.getAttribute(attribute) || "";
    var attrs = {
      __confluenceMetadata: dom.hasAttribute("__confluenceMetadata") ? JSON.parse(dom.getAttribute("__confluenceMetadata") || "") : void 0
    };
    if (!isSafeUrl(href)) {
      return false;
    }
    if (isRootRelative(href)) {
      attrs.href = href;
      return attrs;
    }
    attrs.href = normalizeUrl(href);
    return attrs;
  };
};
var link2 = link({
  parseDOM: [{
    tag: "[data-block-link]",
    getAttrs: getLinkAttrs("data-block-link"),
    contentElement: function contentElement(node) {
      var clone = node.cloneNode(true);
      clone.removeAttribute("data-block-link");
      clone.setAttribute("data-skip-paste", "true");
      var wrapper = document.createElement("div");
      wrapper.appendChild(clone);
      return wrapper;
    }
  }, {
    tag: "a[href]",
    getAttrs: getLinkAttrs("href")
  }],
  toDOM: function toDOM54(node, isInline) {
    var attrs = Object.keys(node.attrs).reduce(function(attrs2, key) {
      if (key === "__confluenceMetadata") {
        if (node.attrs[key] !== null) {
          attrs2[key] = JSON.stringify(node.attrs[key]);
        }
      } else if (key === "href") {
        attrs2[key] = isSafeUrl(node.attrs[key]) ? node.attrs[key] : void 0;
      } else {
        attrs2[key] = node.attrs[key];
      }
      return attrs2;
    }, {});
    if (isInline) {
      return ["a", attrs];
    }
    return ["a", _objectSpread8(_objectSpread8({}, attrs), {}, _defineProperty(_defineProperty({}, "data-block-link", "true"), "class", "blockLink")), 0];
  }
});
var OPTIONAL_ATTRS = ["title", "id", "collection", "occurrenceKey", "__confluenceMetadata"];
var toJSON11 = function toJSON12(mark) {
  return {
    type: mark.type.name,
    attrs: Object.keys(mark.attrs).reduce(function(attrs, key) {
      if (OPTIONAL_ATTRS.indexOf(key) === -1 || mark.attrs[key] !== null) {
        attrs[key] = mark.attrs[key];
      }
      return attrs;
    }, {})
  };
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/type-ahead-query.js
var typeAheadQuery2 = typeAheadQuery({
  parseDOM: [{
    tag: "span[data-type-ahead-query]"
  }],
  toDOM: function toDOM55(node) {
    return ["span", {
      "data-type-ahead-query": "true",
      "data-trigger": node.attrs.trigger,
      style: "color: ".concat(B400)
    }];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/subsup.js
function getAttrFromVerticalAlign(node) {
  if (node === "sub") {
    return {
      type: "sub"
    };
  }
  if (node === "super") {
    return {
      type: "sup"
    };
  }
  return false;
}
var subsup2 = subsup({
  parseDOM: [{
    tag: "sub",
    attrs: {
      type: "sub"
    }
  }, {
    tag: "sup",
    attrs: {
      type: "sup"
    }
  }, {
    // Special case for pasting from Google Docs
    // Google Docs uses vertical align to denote subscript and super script
    style: "vertical-align=super",
    getAttrs: function getAttrs45(node) {
      return getAttrFromVerticalAlign(node);
    }
  }, {
    style: "vertical-align=sub",
    getAttrs: function getAttrs46(node) {
      return getAttrFromVerticalAlign(node);
    }
  }],
  toDOM: function toDOM56(mark) {
    return [mark.attrs.type];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/text-color.js
var colorArrayPalette = [
  // default row - first color is added programatically
  // [N800, 'Squid ink'], // default dark gray
  [B500, "Dark blue"],
  // Chore coat
  [T500, "Dark teal"],
  // Shabby chic
  [G500, "Dark green"],
  // Keen green
  [Y400, "Orange"],
  // Cheezy blasters
  [R500, "Dark red"],
  // Dragon's blood
  [P500, "Dark purple"],
  // Prince
  // row 2
  [N80, "Light gray"],
  // Spooky ghost
  [B100, "Blue"],
  // Arvo breeze
  [T300, "Teal"],
  // Tamarama
  [G300, "Green"],
  // Fine pine
  [Y200, "Yellow"],
  // Pub mix
  [R300, "Red"],
  // Poppy surprise
  [P300, "Purple"],
  // Da' juice
  // row 3
  [N0, "White"],
  [B75, "Light blue"],
  // Schwag
  [T75, "Light teal"],
  // Arctic chill
  [G75, "Light green"],
  // Mintie
  [Y75, "Light yellow"],
  // Dandelion whisper
  [R75, "Light red"],
  // Bondi sunburn
  [P50, "Light purple"]
  // Lavender secret
];
var colorPalette = /* @__PURE__ */ new Map();
colorArrayPalette.forEach(function(_ref) {
  var _ref2 = _slicedToArray(_ref, 2), color = _ref2[0], label = _ref2[1];
  return colorPalette.set(color.toLowerCase(), label);
});
var testGlobalTheme2;
var getGlobalTheme3 = function getGlobalTheme4() {
  if (testGlobalTheme2) {
    return {
      colorMode: testGlobalTheme2
    };
  }
  var element = document.documentElement;
  var colorMode = element.getAttribute("data-color-mode") || "";
  return {
    colorMode
  };
};
var textColor2 = textColor({
  parseDOM: [
    {
      style: "color",
      getAttrs: function getAttrs47(maybeValue) {
        var value = maybeValue;
        var hexColor;
        if (value.match(/^rgb/i)) {
          hexColor = rgbToHex(value);
        } else if (value[0] === "#") {
          hexColor = value.toLowerCase();
        }
        return hexColor && colorPalette.has(hexColor) ? {
          color: hexColor
        } : false;
      }
    },
    // This rule ensures when loading from a renderer or editor where the
    // presented text color does not match the stored hex color -- that the
    // text color is preserved.
    //
    // This was initially introduced to ensure text-color marks were not lost
    // when text-color was used inside a link, and is now also used to support
    // where the hex color stored in ADF is used as an ID for a design system
    // token (and based on theme mode -- the presented color will change).
    {
      tag: ".fabric-text-color-mark",
      getAttrs: function getAttrs48(maybeElement) {
        if (!(maybeElement instanceof HTMLElement)) {
          return false;
        }
        var hexColor = maybeElement.dataset.textCustomColor;
        return hexColor && colorPalette.has(hexColor) ? {
          color: hexColor
        } : false;
      }
    }
  ],
  toDOM: function toDOM57(mark) {
    var paletteColorValue;
    var tokenColor = hexToEditorTextPaletteColor(mark.attrs.color);
    if (tokenColor) {
      paletteColorValue = tokenColor;
    } else {
      if (getGlobalTheme3().colorMode === "dark") {
        paletteColorValue = getDarkModeLCHColor(mark.attrs.color);
      } else {
        paletteColorValue = mark.attrs.color;
      }
    }
    return ["span", _defineProperty({
      class: "fabric-text-color-mark",
      // Editor common has a common style which uses this css variable as the value for
      // the color property using the `fabric-text-color-mark` selector applied above.
      style: "--custom-palette-color: ".concat(paletteColorValue)
    }, "data-text-custom-color", mark.attrs.color)];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/confluence-inline-comment.js
var confluenceInlineComment2 = confluenceInlineComment({
  parseDOM: [{
    tag: 'span[data-mark-type="confluenceInlineComment"]'
  }],
  toDOM: function toDOM58(node) {
    return ["span", {
      "data-mark-type": "confluenceInlineComment",
      "data-reference": node.attrs.reference
    }];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/breakout.js
var allowedTypes = ["wide", "full-width"];
var breakout2 = breakout({
  parseDOM: [{
    tag: "div.fabric-editor-breakout-mark",
    getAttrs: function getAttrs49(dom) {
      var mode = dom.getAttribute("data-mode");
      return {
        mode: allowedTypes.indexOf(mode || "") === -1 ? "wide" : mode
      };
    }
  }],
  toDOM: function toDOM59(mark) {
    return ["div", {
      class: "fabric-editor-breakout-mark",
      "data-mode": mark.attrs.mode
    }, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/alignment.js
var alignment2 = alignment({
  parseDOM: [{
    tag: "div.fabric-editor-block-mark",
    getAttrs: function getAttrs50(dom) {
      var align = dom.getAttribute("data-align");
      return align ? {
        align
      } : false;
    }
  }],
  toDOM: function toDOM60(mark) {
    return ["div", {
      class: "fabric-editor-block-mark fabric-editor-alignment fabric-editor-align-".concat(mark.attrs.align),
      "data-align": mark.attrs.align
    }, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/indentation.js
var indentation2 = indentation({
  parseDOM: [{
    tag: "div.fabric-editor-indentation-mark",
    getAttrs: function getAttrs51(dom) {
      var level = +(dom.getAttribute("data-level") || "0");
      return {
        level: level > 6 ? 6 : level < 1 ? false : level
      };
    }
  }],
  toDOM: function toDOM61(mark) {
    return ["div", {
      class: "fabric-editor-block-mark fabric-editor-indentation-mark",
      "data-level": mark.attrs.level
    }, 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/annotation.js
function ownKeys9(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread9(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys9(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys9(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var AnnotationTypes = function(AnnotationTypes2) {
  AnnotationTypes2["INLINE_COMMENT"] = "inlineComment";
  return AnnotationTypes2;
}({});
var AnnotationMarkStates = function(AnnotationMarkStates2) {
  AnnotationMarkStates2["RESOLVED"] = "resolved";
  AnnotationMarkStates2["ACTIVE"] = "active";
  return AnnotationMarkStates2;
}({});
function buildDataAttributes(_ref) {
  var id = _ref.id, annotationType = _ref.annotationType, state = _ref.state;
  var data = {
    "data-mark-type": "annotation",
    "data-mark-annotation-type": annotationType,
    "data-id": id
  };
  if (state) {
    return _objectSpread9(_objectSpread9({}, data), {}, {
      "data-mark-annotation-state": state
    });
  }
  return data;
}
var annotation2 = annotation({
  parseDOM: [{
    tag: 'span[data-mark-type="annotation"]',
    mark: "annotation",
    getAttrs: function getAttrs52(domNode) {
      var dom = domNode;
      var attrs = {
        id: dom.getAttribute("data-id"),
        annotationType: dom.getAttribute("data-mark-annotation-type")
      };
      return attrs;
    }
  }],
  toDOM: function toDOM62(node) {
    return ["span", _objectSpread9({
      // Prettier will remove the quotes around class. This would cause some browsers
      // to not add this attribute properly, as its a reserved word.
      // prettier-ignore
      "class": "fabric-editor-annotation"
    }, buildDataAttributes({
      id: node.attrs.id,
      annotationType: node.attrs.annotationType
    })), 0];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/unsupported-mark.js
var unsupportedMark2 = unsupportedMark({
  toDOM: function toDOM63() {
    return ["span"];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/unsupported-node-attributes.js
var unsupportedNodeAttribute2 = unsupportedNodeAttribute({
  toDOM: function toDOM64() {
    return ["span"];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/data-consumer.js
function ownKeys10(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread10(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys10(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys10(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var parseDataConsumer = function parseDataConsumer2(maybeValue) {
  var sources = isDOMElement(maybeValue) && maybeValue.getAttribute("data-sources");
  try {
    return sources ? {
      sources: JSON.parse(sources)
    } : false;
  } catch (_unused) {
    return false;
  }
};
var dataConsumer2 = dataConsumer({
  parseDOM: [{
    tag: '[data-mark-type="dataConsumer"]',
    getAttrs: function getAttrs53(maybeValue) {
      return parseDataConsumer(maybeValue);
    }
  }],
  toDOM: function toDOM65(mark, inline) {
    var wrapperStyle = inline ? "span" : "div";
    return [wrapperStyle, {
      "data-mark-type": "dataConsumer",
      "data-sources": JSON.stringify(mark.attrs.sources)
    }];
  }
});
var toJSON13 = function toJSON14(mark) {
  return {
    type: mark.type.name,
    attrs: Object.keys(mark.attrs).filter(function(key) {
      return key === "sources" && mark.attrs[key].length > 0 && mark.attrs[key] !== null;
    }).reduce(function(acc, key) {
      return _objectSpread10(_objectSpread10({}, acc), {}, _defineProperty({}, key, mark.attrs[key]));
    }, {})
  };
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/fragment.js
function ownKeys11(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread11(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys11(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys11(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var parseFragment = function parseFragment2(maybeValue) {
  var _maybeValue$getAttrib;
  if (!isDOMElement(maybeValue)) {
    return false;
  }
  var name7 = (_maybeValue$getAttrib = maybeValue.getAttribute("data-name")) !== null && _maybeValue$getAttrib !== void 0 ? _maybeValue$getAttrib : void 0;
  var localId = maybeValue.getAttribute("data-localId");
  if (!localId) {
    return false;
  }
  return {
    localId,
    name: name7
  };
};
var fragment2 = fragment({
  parseDOM: [{
    tag: '[data-mark-type="fragment"]',
    getAttrs: function getAttrs54(maybeValue) {
      return parseFragment(maybeValue);
    }
  }],
  toDOM: function toDOM66(mark, inline) {
    var wrapperStyle = inline ? "span" : "div";
    return [wrapperStyle, {
      "data-mark-type": "fragment",
      "data-name": mark.attrs.name,
      "data-localId": mark.attrs.localId
    }];
  }
});
var toJSON15 = function toJSON16(mark) {
  return {
    type: mark.type.name,
    attrs: _objectSpread11({
      localId: mark.attrs.localId
    }, mark.attrs.name ? {
      name: mark.attrs.name
    } : {})
  };
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/border.js
var borderColorArrayPalette = [[N300A, "Subtle gray"], [N600, "Gray"], [N1000, "Bold gray"]];
var borderColorPalette = /* @__PURE__ */ new Map();
borderColorArrayPalette.forEach(function(_ref) {
  var _ref2 = _slicedToArray(_ref, 2), color = _ref2[0], label = _ref2[1];
  return borderColorPalette.set(color.toLowerCase(), label);
});
var border2 = border({
  parseDOM: [{
    tag: '[data-mark-type="border"]',
    getAttrs: function getAttrs55(domNode) {
      var _dom$getAttribute, _dom$getAttribute2;
      var dom = domNode;
      var color = ((_dom$getAttribute = dom.getAttribute("data-color")) !== null && _dom$getAttribute !== void 0 ? _dom$getAttribute : "").toLowerCase();
      var size = +((_dom$getAttribute2 = dom.getAttribute("data-size")) !== null && _dom$getAttribute2 !== void 0 ? _dom$getAttribute2 : "0");
      return {
        size: size > 3 ? 3 : size < 1 ? false : size,
        color: borderColorPalette.has(color) ? color : false
      };
    }
  }],
  toDOM: function toDOM67(mark, isInline) {
    var wrapperStyle = isInline ? "span" : "div";
    var paletteColorValue = hexToEditorBorderPaletteColor(mark.attrs.color) || mark.attrs.color;
    return [wrapperStyle, {
      "data-mark-type": "border",
      "data-color": mark.attrs.color,
      "data-size": mark.attrs.size,
      style: "--custom-palette-color: ".concat(paletteColorValue)
    }];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/marks/background-color.js
var colorArrayPalette2 = [
  [Neutral300, "Gray"],
  // token: color.background.accent.gray.subtler
  [T200, "Teal"],
  // token: color.background.accent.teal.subtler
  [L200, "Lime"],
  // token: color.background.accent.lime.subtler
  [O200, "Orange"],
  // token: color.background.accent.orange.subtler
  [M200, "Magenta"],
  // token: color.background.accent.magenta.subtler
  [P200, "Purple"]
  // token: color.background.accent.purple.subtler
];
var backgroundColorPalette = /* @__PURE__ */ new Map();
colorArrayPalette2.forEach(function(_ref) {
  var _ref2 = _slicedToArray(_ref, 2), color = _ref2[0], label = _ref2[1];
  return backgroundColorPalette.set(color.toLowerCase(), label);
});
var backgroundColor2 = backgroundColor({
  parseDOM: [
    {
      style: "background-color",
      getAttrs: function getAttrs56(maybeValue) {
        var value = maybeValue;
        var hexColor;
        if (value.match(/^rgb/i)) {
          hexColor = rgbToHex(value);
        } else if (value[0] === "#") {
          hexColor = value.toLowerCase();
        }
        return hexColor && backgroundColorPalette.has(hexColor) ? {
          color: hexColor
        } : false;
      }
    },
    // This rule ensures when loading from a renderer or editor where the
    // presented text color does not match the stored hex color -- that the
    // text color is preserved.
    //
    // This is used to support the work-around that converts the hex color to
    // a design system token to enable light / dark mode (through a CSS variable --custom-palette-color)
    {
      tag: ".fabric-background-color-mark",
      getAttrs: function getAttrs57(maybeElement) {
        if (!(maybeElement instanceof HTMLElement)) {
          return false;
        }
        var hexColor = maybeElement.dataset.backgroundCustomColor;
        return hexColor && backgroundColorPalette.has(hexColor) ? {
          color: hexColor
        } : false;
      }
    }
  ],
  toDOM: function toDOM68(mark) {
    var paletteColorValue;
    var tokenColor = hexToEditorTextBackgroundPaletteColor(mark.attrs.color);
    if (tokenColor) {
      paletteColorValue = tokenColor;
    } else {
      if (getGlobalTheme3().colorMode === "dark") {
        paletteColorValue = getDarkModeLCHColor(mark.attrs.color);
      } else {
        paletteColorValue = mark.attrs.color;
      }
    }
    return ["span", _defineProperty({
      class: "fabric-background-color-mark",
      // Editor common has a common style which uses this css variable as the value for
      // the color property using the `fabric-text-background-color-mark` selector applied above.
      style: "--custom-palette-color: ".concat(paletteColorValue)
    }, "data-background-custom-color", mark.attrs.color)];
  }
});

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/inline-nodes.js
var typedNodes = nodes_exports;
var inlineNodes = new Set(Object.keys(typedNodes).filter(function(key) {
  return typedNodes[key] && typedNodes[key].group === "inline";
}));

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/groups.js
var FONT_STYLE = "fontStyle";
var SEARCH_QUERY = "searchQuery";
var LINK = "link";
var COLOR = "color";

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/create-schema.js
function ownKeys12(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread12(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys12(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys12(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function addItems(builtInItems, config) {
  var customSpecs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  if (!config) {
    return {};
  }
  var items = builtInItems.reduce(function(items2, _ref) {
    var name7 = _ref.name, spec = _ref.spec;
    if (config.indexOf(name7) !== -1) {
      items2[name7] = customSpecs[name7] || spec;
    }
    return items2;
  }, {});
  return Object.keys(customSpecs).reduce(function(items2, name7) {
    if (items2[name7]) {
      return items2;
    }
    items2[name7] = customSpecs[name7];
    return items2;
  }, items);
}
function groupDeclaration(name7) {
  return {
    name: "__".concat(name7, "GroupDeclaration"),
    spec: {
      group: name7
    }
  };
}
var markGroupDeclarations = [groupDeclaration(COLOR), groupDeclaration(FONT_STYLE), groupDeclaration(SEARCH_QUERY), groupDeclaration(LINK)];
var markGroupDeclarationsNames = markGroupDeclarations.map(function(groupMark) {
  return groupMark.name;
});
var nodesInOrder = [{
  name: "doc",
  spec: doc2
}, {
  name: "paragraph",
  spec: paragraph2
}, {
  name: "text",
  spec: text2
}, {
  name: "bulletList",
  spec: bulletList2
}, {
  name: "orderedList",
  spec: orderedListWithOrder
}, {
  name: "listItem",
  spec: listItemWithTask
}, {
  name: "heading",
  spec: heading2
}, {
  name: "blockquote",
  spec: blockquoteWithNestedCodeblockOrMedia
}, {
  name: "codeBlock",
  spec: codeBlock2
}, {
  name: "panel",
  spec: extendedPanel(true)
}, {
  name: "rule",
  spec: rule2
}, {
  name: "image",
  spec: image2
}, {
  name: "mention",
  spec: mention2
}, {
  name: "caption",
  spec: caption2
}, {
  name: "media",
  spec: media2
}, {
  name: "mediaGroup",
  spec: mediaGroup2
}, {
  name: "mediaSingle",
  spec: mediaSingleFull2
}, {
  name: "mediaInline",
  spec: mediaInline2
}, {
  name: "placeholder",
  spec: placeholder2
}, {
  name: "layoutSection",
  spec: layoutSection2
}, {
  name: "layoutColumn",
  spec: layoutColumn2
}, {
  name: "hardBreak",
  spec: hardBreak2
}, {
  name: "emoji",
  spec: emoji2
}, {
  name: "table",
  spec: table2
}, {
  name: "tableCell",
  spec: tableCell2
}, {
  name: "tableRow",
  spec: tableRow2
}, {
  name: "tableHeader",
  spec: tableHeader2
}, {
  name: "confluenceJiraIssue",
  spec: confluenceJiraIssue2
}, {
  name: "confluenceUnsupportedInline",
  spec: confluenceUnsupportedInline2
}, {
  name: "confluenceUnsupportedBlock",
  spec: confluenceUnsupportedBlock2
}, {
  name: "decisionList",
  spec: decisionList2
}, {
  name: "decisionItem",
  spec: decisionItem2
}, {
  name: "taskList",
  spec: taskList2
}, {
  name: "taskItem",
  spec: taskItem2
}, {
  name: "date",
  spec: date2
}, {
  name: "status",
  spec: status2
}, {
  name: "expand",
  spec: expandWithNestedExpand
}, {
  name: "nestedExpand",
  spec: nestedExpand2
}, {
  name: "extension",
  spec: extension2
}, {
  name: "inlineExtension",
  spec: inlineExtension2
}, {
  name: "bodiedExtension",
  spec: bodiedExtension2
}, {
  name: "multiBodiedExtension",
  spec: multiBodiedExtension
}, {
  name: "extensionFrame",
  spec: extensionFrame
}, {
  name: "inlineCard",
  spec: inlineCard2
}, {
  name: "blockCard",
  spec: blockCard2
}, {
  name: "embedCard",
  spec: embedCard2
}, {
  name: "unknownBlock",
  spec: unknown_block_default
}, {
  name: "unsupportedBlock",
  spec: unsupportedBlock2
}, {
  name: "unsupportedInline",
  spec: unsupportedInline2
}];
var marksInOrder = [{
  name: "link",
  spec: link2
}, {
  name: "em",
  spec: em2
}, {
  name: "strong",
  spec: strong2
}, {
  name: "textColor",
  spec: textColor2
}, {
  name: "backgroundColor",
  spec: backgroundColor2
}, {
  name: "strike",
  spec: strike2
}, {
  name: "subsup",
  spec: subsup2
}, {
  name: "underline",
  spec: underline2
}, {
  name: "code",
  spec: code2
}, {
  name: "typeAheadQuery",
  spec: typeAheadQuery2
}, {
  name: "alignment",
  spec: alignment2
}, {
  name: "annotation",
  spec: annotation2
}, {
  name: "confluenceInlineComment",
  spec: confluenceInlineComment2
}].concat(markGroupDeclarations, [{
  name: "breakout",
  spec: breakout2
}, {
  name: "dataConsumer",
  spec: dataConsumer2
}, {
  name: "fragment",
  spec: fragment2
}, {
  name: "indentation",
  spec: indentation2
}, {
  name: "border",
  spec: border2
}, {
  name: "unsupportedMark",
  spec: unsupportedMark2
}, {
  name: "unsupportedNodeAttribute",
  spec: unsupportedNodeAttribute2
}]);
function createSchema(config) {
  var customNodeSpecs = config.customNodeSpecs, customMarkSpecs = config.customMarkSpecs;
  var nodesConfig = Object.keys(customNodeSpecs || {}).concat(config.nodes);
  var marksConfig = Object.keys(customMarkSpecs || {}).concat(config.marks || []).concat(markGroupDeclarationsNames);
  var nodes = addItems(nodesInOrder, nodesConfig, customNodeSpecs);
  var marks = addItems(marksInOrder, marksConfig, customMarkSpecs);
  nodes = sanitizeNodes(nodes, marks);
  return new Schema({
    nodes,
    marks
  });
}
function sanitizeNodes(nodes, supportedMarks) {
  var nodeNames = Object.keys(nodes);
  nodeNames.forEach(function(nodeKey) {
    var nodeSpec = _objectSpread12({}, nodes[nodeKey]);
    if (nodeSpec.marks && nodeSpec.marks !== "_") {
      nodeSpec.marks = nodeSpec.marks.split(" ").filter(function(mark) {
        return !!supportedMarks[mark];
      }).join(" ");
    }
    if (nodeSpec.content) {
      nodeSpec.content = sanitizeNodeSpecContent(nodes, nodeSpec.content);
    }
    nodes[nodeKey] = nodeSpec;
  });
  return nodes;
}
function sanitizeNodeSpecContent(nodes, rawContent) {
  var content = rawContent.replace(/\W/g, " ");
  var contentKeys = content.split(" ");
  var unsupportedContentKeys = contentKeys.filter(function(contentKey) {
    return !isContentSupported(nodes, contentKey);
  });
  return unsupportedContentKeys.reduce(function(newContent, nodeName) {
    return sanitizedContent(newContent, nodeName);
  }, rawContent);
}
function sanitizedContent(content, invalidContent) {
  if (!invalidContent.length) {
    return content || "";
  }
  if (!content || !content.match(/\w/)) {
    return "";
  }
  var pattern = "(".concat(invalidContent, "((\\s)*\\|)+)|((\\|(\\s)*)+").concat(invalidContent, ")|(").concat(invalidContent, "$)|(").concat(invalidContent, "(\\+|\\*))");
  return content.replace(new RegExp(pattern, "g"), "").replace("  ", " ").trim();
}
function isContentSupported(nodes, contentKey) {
  var nodeKeys = Object.keys(nodes);
  if (nodeKeys.indexOf(contentKey) > -1) {
    return true;
  }
  for (var supportedKey in nodes) {
    var nodeSpec = nodes[supportedKey];
    if (nodeSpec && nodeSpec.group === contentKey) {
      return true;
    }
  }
  return false;
}

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-schema/dist/esm/schema/default-schema.js
var getDefaultSchemaConfig = function getDefaultSchemaConfig2() {
  var defaultSchemaConfig2 = {
    nodes: ["doc", "paragraph", "text", "bulletList", "orderedList", "listItem", "heading", "blockquote", "codeBlock", "panel", "rule", "image", "caption", "mention", "media", "mediaGroup", "mediaSingle", "mediaInline", "confluenceUnsupportedBlock", "confluenceUnsupportedInline", "confluenceJiraIssue", "expand", "nestedExpand", "extension", "inlineExtension", "bodiedExtension", "hardBreak", "emoji", "table", "tableCell", "tableHeader", "tableRow", "decisionList", "decisionItem", "taskList", "taskItem", "unknownBlock", "date", "status", "placeholder", "layoutSection", "layoutColumn", "inlineCard", "blockCard", "embedCard", "unsupportedBlock", "unsupportedInline"],
    marks: [
      "link",
      "em",
      "strong",
      "strike",
      "subsup",
      "underline",
      "code",
      "textColor",
      "backgroundColor",
      "confluenceInlineComment",
      "breakout",
      "alignment",
      "indentation",
      "annotation",
      "dataConsumer",
      "border",
      "unsupportedMark",
      "unsupportedNodeAttribute",
      "typeAheadQuery",
      // https://product-fabric.atlassian.net/browse/ED-10214,
      "fragment"
    ]
  };
  return defaultSchemaConfig2;
};
var defaultSchemaConfig = getDefaultSchemaConfig();
var getSchemaBasedOnStage = memoizeOne(function() {
  var stage = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "final";
  var defaultSchemaConfig2 = getDefaultSchemaConfig();
  if (stage === "stage0") {
    defaultSchemaConfig2.customNodeSpecs = {
      layoutSection: layoutSectionWithSingleColumn,
      multiBodiedExtension,
      extensionFrame,
      expand: expandWithNestedExpand,
      blockquote: blockquoteWithNestedCodeblockOrMedia,
      listItem: listItemWithDecisionStage0,
      panel: panelWithBlockquoteStage0(true)
    };
  }
  return createSchema(defaultSchemaConfig2);
});
var defaultSchema = getSchemaBasedOnStage();

// node_modules/@atlaskit/editor-json-transformer/dist/esm/markOverrideRules.js
var defaultAllowOverrideBehaviour = {
  canOverrideUnsupportedMark: function canOverrideUnsupportedMark() {
    return true;
  }
};
var defaultDoNotAllowOverrideBehaviour = {
  canOverrideUnsupportedMark: function canOverrideUnsupportedMark2() {
    return false;
  }
};
var markOverrideRuleFor = function markOverrideRuleFor2(type) {
  switch (type) {
    case "link":
    case "em":
    case "strong":
    case "strike":
    case "subsup":
    case "underline":
    case "code":
    case "textColor":
    case "backgroundColor":
    case "confluenceInlineComment":
    case "breakout":
    case "alignment":
    case "indentation":
    case "border":
      return defaultAllowOverrideBehaviour;
    default:
      return defaultDoNotAllowOverrideBehaviour;
  }
};

// node_modules/@atlaskit/editor-json-transformer/node_modules/@atlaskit/adf-utils/dist/esm/traverse/traverse.js
function ownKeys13(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread13(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys13(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys13(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function validateVisitors(_visitors) {
  return true;
}
function traverse(adf, visitors) {
  if (!validateVisitors(visitors)) {
    throw new Error('Visitors are not valid: "'.concat(Object.keys(visitors).join(", "), '"'));
  }
  return traverseNode(adf, {
    node: void 0
  }, visitors, 0, 0);
}
function traverseNode(adfNode, parent, visitors, index, depth) {
  var visitor = visitors[adfNode.type] || visitors["any"];
  var newNode = _objectSpread13({}, adfNode);
  if (visitor) {
    var processedNode = visitor(_objectSpread13({}, newNode), parent, index, depth);
    if (processedNode === false) {
      return false;
    }
    newNode = processedNode || adfNode;
  }
  if (newNode.content) {
    newNode.content = newNode.content.reduce(function(acc, node, idx) {
      if (!node) {
        return acc;
      }
      var processedNode2 = traverseNode(node, {
        node: newNode,
        parent
      }, visitors, idx, depth + 1);
      if (processedNode2 !== false) {
        acc.push(processedNode2);
      }
      return acc;
    }, []);
  }
  return newNode;
}

// node_modules/@atlaskit/editor-json-transformer/dist/esm/sanitize/remove-marks.js
function ownKeys14(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread14(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys14(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys14(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function removeMarks(node) {
  var newNode = _objectSpread14({}, node);
  delete newNode.marks;
  return newNode;
}
function removeNonAnnotationMarks(node) {
  var newNode = _objectSpread14({}, node);
  if (node.marks) {
    newNode.marks = node.marks.filter(function(mark) {
      return mark.type === "annotation";
    });
  }
  return newNode;
}

// node_modules/@atlaskit/editor-json-transformer/dist/esm/sanitize/sanitize-node.js
function ownKeys15(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread15(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys15(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys15(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function sanitizeNode(json) {
  var sanitizedJSON = traverse(json, {
    text: function text3(node) {
      if (!node || !Array.isArray(node.marks)) {
        return node;
      }
      return _objectSpread15(_objectSpread15({}, node), {}, {
        marks: node.marks.filter(function(mark) {
          return mark.type !== "typeAheadQuery";
        })
      });
    },
    status: function status3(node) {
      if (node.attrs && !!node.attrs.text) {
        return removeNonAnnotationMarks(node);
      }
      return false;
    },
    caption: function caption3(node) {
      if (node.content) {
        return node;
      }
      return false;
    },
    emoji: removeNonAnnotationMarks,
    mention: removeNonAnnotationMarks,
    date: removeNonAnnotationMarks,
    hardBreak: removeMarks,
    inlineCard: removeNonAnnotationMarks
  });
  return sanitizedJSON;
}

// node_modules/@atlaskit/editor-json-transformer/dist/esm/index.js
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : String(i);
}
function _toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function ownKeys16(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread16(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys16(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys16(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var SchemaStage = function(SchemaStage2) {
  SchemaStage2["FINAL"] = "final";
  SchemaStage2["STAGE_0"] = "stage0";
  return SchemaStage2;
}({});
var isType = function isType2(type) {
  return function(node) {
    return node.type.name === type;
  };
};
var isCodeBlock = isType("codeBlock");
var isMediaNode = isType("media");
var isMediaInline = isType("mediaInline");
var isMediaSingleNode = isType("mediaSingle");
var isMentionNode = isType("mention");
var isParagraph = isType("paragraph");
var isHeading = isType("heading");
var isTable = isType("table");
var isTableCell = isType("tableCell");
var isTableHeader = isType("tableHeader");
var isLinkMark = isType("link");
var isUnsupportedMark = isType("unsupportedMark");
var isUnsupportedNodeAttributeMark = isType("unsupportedNodeAttribute");
var isExpand = isType("expand");
var isNestedExpand = isType("nestedExpand");
var isUnsupportedNode = function isUnsupportedNode2(node) {
  return isType("unsupportedBlock")(node) || isType("unsupportedInline")(node);
};
var isDataConsumer = isType("dataConsumer");
var isFragmentMark = isType("fragment");
var filterNull = function filterNull2(subject) {
  var output = _objectSpread16({}, subject);
  for (var key in output) {
    var current = output[key];
    if (current === null) {
      var _output = output, unusedKey = _output[key], filteredObj = _objectWithoutProperties(_output, [key].map(_toPropertyKey));
      output = filteredObj;
    } else if (_typeof(current) === "object" && !Array.isArray(current)) {
      output[key] = filterNull2(current);
    }
  }
  return output;
};
var createDocFromContent = function createDocFromContent2(content) {
  return {
    version: 1,
    type: "doc",
    content: content || []
  };
};
var emptyDoc = createDocFromContent([{
  type: "paragraph",
  content: []
}]);
var toJSON17 = function toJSON18(node) {
  var obj = {
    type: node.type.name
  };
  if (isUnsupportedNode(node)) {
    return node.attrs.originalValue;
  } else if (isMediaNode(node)) {
    obj.attrs = toJSON7(node).attrs;
  } else if (isMediaSingleNode(node)) {
    obj.attrs = toJSON9(node).attrs;
  } else if (isMediaInline(node)) {
    obj.attrs = toJSON7(node).attrs;
  } else if (isMentionNode(node)) {
    obj.attrs = toJSON5(node).attrs;
  } else if (isCodeBlock(node)) {
    obj.attrs = toJSON3(node).attrs;
  } else if (isTable(node)) {
    obj.attrs = tableToJSON(node).attrs;
  } else if (isTableCell(node)) {
    obj.attrs = toJSONTableCell(node).attrs;
  } else if (isTableHeader(node)) {
    obj.attrs = toJSONTableHeader(node).attrs;
  } else if (isExpand(node) || isNestedExpand(node)) {
    obj.attrs = toJSON(node).attrs;
  } else if (node.attrs && Object.keys(node.attrs).length) {
    obj.attrs = node.attrs;
  }
  if (obj.attrs) {
    obj.attrs = filterNull(obj.attrs);
  }
  if (isParagraph(node) && obj.attrs && !Object.keys(obj.attrs).length) {
    delete obj.attrs;
  }
  if (node.isText) {
    obj.text = node.textContent;
  } else {
    node.content.forEach(function(child) {
      obj.content = obj.content || [];
      obj.content.push(toJSON18(child));
    });
  }
  if (isParagraph(node) || isHeading(node)) {
    obj.content = obj.content || [];
  }
  if (node.marks.length) {
    var parsedMarks = node.marks.map(function(mark) {
      if (isUnsupportedMark(mark)) {
        return canOverrideMark(mark, node.marks) ? null : mark.attrs.originalValue;
      } else if (isUnsupportedNodeAttributeMark(mark)) {
        return null;
      } else if (isLinkMark(mark)) {
        return toJSON11(mark);
      } else if (isDataConsumer(mark)) {
        var _serialised$attrs$sou;
        var serialised = toJSON13(mark);
        return !serialised.attrs.sources || ((_serialised$attrs$sou = serialised.attrs.sources) === null || _serialised$attrs$sou === void 0 ? void 0 : _serialised$attrs$sou.length) === 0 ? null : serialised;
      } else if (isFragmentMark(mark)) {
        var fragmentMark = toJSON15(mark);
        if (!fragmentMark.attrs.localId) {
          return null;
        }
        return fragmentMark;
      } else {
        return mark.toJSON();
      }
    }).filter(function(maybeMark) {
      return maybeMark !== null;
    });
    obj.marks = (parsedMarks === null || parsedMarks === void 0 ? void 0 : parsedMarks.length) > 0 ? parsedMarks : void 0;
    var nodeAttributeMark = node.marks.find(isUnsupportedNodeAttributeMark);
    if (nodeAttributeMark && nodeAttributeMark.attrs.type.nodeType === obj.type) {
      obj.attrs = _objectSpread16({}, getUnwrappedNodeAttributes(node, nodeAttributeMark, obj));
    }
  }
  return obj;
};
var canOverrideMark = function canOverrideMark2(mark, existingMarks) {
  if (existingMarks.some(function(e) {
    return mark.attrs.originalValue.type === e.type.name;
  })) {
    return markOverrideRuleFor(mark.attrs.originalValue.type).canOverrideUnsupportedMark();
  }
  return false;
};
var getUnwrappedNodeAttributes = function getUnwrappedNodeAttributes2(node, mark, obj) {
  var nodeAttributes = node.type.spec.attrs;
  var attributes = _objectSpread16(_objectSpread16({}, mark.attrs.unsupported), obj.attrs);
  for (var key in obj.attrs) {
    if (obj.attrs.hasOwnProperty(key)) {
      var attribute = nodeAttributes ? nodeAttributes[key] : null;
      if (attribute) {
        if (attribute.default === node.attrs[key] && mark.attrs.unsupported[key]) {
          return _objectSpread16(_objectSpread16({}, attributes), {}, _defineProperty({}, key, mark.attrs.unsupported[key]));
        }
      }
    }
  }
  return attributes;
};
var JSONTransformer = function() {
  function JSONTransformer2() {
    _classCallCheck(this, JSONTransformer2);
  }
  _createClass(JSONTransformer2, [{
    key: "encode",
    value: function encode(node) {
      var content = [];
      node.content.forEach(function(child) {
        content.push(sanitizeNode(toJSON17(child)));
      });
      if (!content || (0, import_isEqual.default)(content, emptyDoc.content)) {
        return createDocFromContent([]);
      }
      return createDocFromContent(content);
    }
  }, {
    key: "internalParse",
    value: function internalParse(content) {
      var stage = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : SchemaStage.FINAL;
      var schema = getSchemaBasedOnStage(stage);
      var doc3 = schema.nodeFromJSON(content);
      doc3.check();
      return doc3;
    }
  }, {
    key: "parse",
    value: function parse(content, stage) {
      if (content.type !== "doc") {
        throw new Error("Expected content format to be ADF");
      }
      if (!content.content || content.content.length === 0) {
        return this.internalParse(emptyDoc, stage);
      }
      return this.internalParse(content, stage);
    }
    /**
     * This method is used to encode a single node
     */
  }, {
    key: "encodeNode",
    value: function encodeNode(node) {
      return sanitizeNode(toJSON17(node));
    }
  }]);
  return JSONTransformer2;
}();
export {
  JSONTransformer,
  SchemaStage
};
//# sourceMappingURL=@atlaskit_editor-json-transformer.js.map
