import { $or, $zeroPlus, adfNode } from '@atlaskit/adf-schema-generator';
import { breakout } from '../marks/breakout';
import { unsupportedMark } from '../marks/unsupportedMark';
import { unsupportedNodeAttribute } from '../marks/unsupportedNodeAttribute';
import { text } from './text';
import { unsupportedInline } from './unsupportedInline';
export const codeBlock = adfNode('codeBlock').define({
  code: true,
  defining: true,
  marks: [unsupportedMark, unsupportedNodeAttribute],
  hasEmptyMarks: true,
  attrs: {
    language: {
      type: 'string',
      default: null,
      optional: true
    },
    uniqueId: {
      type: 'string',
      default: null,
      optional: true
    }
  },
  content: [$zeroPlus($or(text, unsupportedInline))],
  DANGEROUS_MANUAL_OVERRIDE: {
    'validator-spec': {
      'props.attrs.props.uniqueId': {
        remove: true,
        reason: '@DSLCompatibilityException - uniqueId is missing in the existing validator spec'
      },
      'props.content.items': {
        value: [['text', {
          props: {
            marks: {
              items: [],
              maxItems: 0,
              optional: true,
              type: 'array'
            }
          }
        }]],
        reason: '@DSLCompatibilityException - text variant is inlined, which is not supported by current transformation'
      }
    }
  }
}).variant('with_marks', {
  marks: [breakout, unsupportedMark, unsupportedNodeAttribute],
  ignore: ['pm-spec']
}).variant('with_no_marks', {
  content: [],
  marks: [],
  noMarks: true,
  ignore: []
});
export const codeBlockWithNoMarks = codeBlock;