import { $or, $zeroPlus, adfNode } from '@atlaskit/adf-schema-generator';
import { atomicInlineGroup } from '../groups/atomicInlineGroup';
import { inlineContentGroup } from '../groups/inlineContentGroup';
import { inlineGroup } from '../groups/inlineGroup';
import { alignment, indentation } from '../marks/alignmentAndIndentation';
import { unsupportedMark } from '../marks/unsupportedMark';
import { unsupportedNodeAttribute } from '../marks/unsupportedNodeAttribute';
export const paragraph = adfNode('paragraph').define({
  attrs: {
    localId: {
      type: 'string',
      optional: true,
      default: null
    }
  },
  selectable: false,
  marks: [unsupportedMark, unsupportedNodeAttribute],
  hasEmptyMarks: true,
  content: [$zeroPlus($or(inlineGroup, atomicInlineGroup, inlineContentGroup))],
  DANGEROUS_MANUAL_OVERRIDE: {
    'validator-spec': {
      'props.marks': {
        value: {
          type: 'array',
          items: [],
          optional: true
        },
        reason: 'NoMark type used in old schema had a hack maxItems: 0 to mark nodes that should not have any marks. This is not possible to represent in new DSL.'
      }
    }
  }
}).variant('with_alignment', {
  marks: [alignment, unsupportedMark, unsupportedNodeAttribute],
  content: [],
  ignore: []
}).variant('with_indentation', {
  marks: [indentation, unsupportedMark, unsupportedNodeAttribute],
  content: [],
  ignore: []
}).variant('with_marks', {
  marks: [alignment, unsupportedMark, unsupportedNodeAttribute],
  content: [],
  ignore: []
}).variant('with_no_marks', {
  content: [],
  marks: [],
  noMarks: true,
  ignore: []
});