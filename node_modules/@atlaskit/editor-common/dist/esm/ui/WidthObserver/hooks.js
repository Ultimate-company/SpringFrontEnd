import { __read } from "tslib";
import React from 'react';
import { browser } from './utils';
export function useInView(options) {
    if (options === void 0) { options = {}; }
    var ref = React.useRef();
    var _a = __read(React.useState({
        inView: false,
        entry: undefined,
        target: undefined,
    }), 2), state = _a[0], setState = _a[1];
    var threshold = options.threshold, root = options.root, rootMargin = options.rootMargin;
    var setRef = React.useCallback(function (node) {
        var supportsIntersectionObserver = browser.supportsIntersectionObserver;
        if (!supportsIntersectionObserver) {
            setState({
                inView: true,
                entry: undefined,
                target: node,
            });
            return null;
        }
        var currentObserver = new IntersectionObserver(function (entries) {
            if (entries && entries.length) {
                var intersection = entries[0];
                var isIntersecting = intersection.isIntersecting, intersectionRatio = intersection.intersectionRatio;
                if (intersectionRatio >= 0) {
                    var inView = intersectionRatio >= (threshold || 0);
                    if (isIntersecting !== undefined) {
                        inView = inView && isIntersecting;
                    }
                    setState({
                        inView: inView,
                        entry: intersection,
                        target: node,
                    });
                }
            }
        }, {
            threshold: threshold,
            root: root,
            rootMargin: rootMargin,
        });
        if (ref.current) {
            currentObserver.unobserve(ref.current);
        }
        if (node) {
            currentObserver.observe(node);
        }
        // Store a reference to the node
        ref.current = node;
    }, [threshold, root, rootMargin]);
    return [setRef, state.inView, state.target, state.entry];
}
//# sourceMappingURL=hooks.js.map