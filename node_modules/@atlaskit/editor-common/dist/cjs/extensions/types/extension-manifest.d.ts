import { ADFEntity } from '@atlaskit/adf-utils';
import { ReactNode } from 'react';
export declare type ExtensionType = string;
export declare type ExtensionKey = string;
export declare type ExtensionModuleKey = string;
export declare type Icon = () => Promise<any>;
export declare type Icons = {
    '48': Icon;
    [dimensions: string]: Icon;
};
export declare type ExtensionNodeType = 'extension' | 'inlineExtension' | 'bodiedExtension';
export declare type ExtensionManifest = {
    type: ExtensionType;
    key: ExtensionKey;
    title: string;
    description: string;
    icons: Icons;
    modules: ExtensionModules;
};
export declare type ExtensionModules = {
    quickInsert?: ExtensionModule[];
    nodes?: ExtensionModuleNodes;
};
export declare type ExtensionModuleAction = ExtensionModuleActionObject | ExtensionModuleActionHandler;
export declare type ExtensionModuleActionObject = {
    key: ExtensionModuleKey;
    type: 'node';
    parameters: any;
};
export declare type ExtensionModuleActionHandler = () => AsyncESModule<ADFEntity>;
export declare type ExtensionModule = {
    key: string;
    title?: string;
    description?: string;
    icon?: Icon;
    priority?: number;
    keywords?: Array<string>;
    action: ExtensionModuleAction;
};
export declare type ExtensionModuleNodes = {
    [key: string]: ExtensionModuleNode;
};
export declare type ExtensionModuleNode<T = any> = {
    type: ExtensionNodeType;
    render: () => AsyncESModule<ReactNode>;
    update?: (parameters: T) => Promise<T>;
};
export declare type ExtensionModuleType = Exclude<keyof ExtensionModules, 'nodes'>;
export declare type ESModule<T> = {
    __esModule?: boolean;
    default: T;
};
export declare type Module<T> = ESModule<T> | T;
export declare type AsyncESModule<T> = Promise<Module<T>>;
export declare type MaybeADFEntity = AsyncESModule<ADFEntity | undefined>;
