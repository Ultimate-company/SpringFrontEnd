function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { Fragment } from '@atlaskit/editor-prosemirror/model';
import { CellSelection } from '../cell-selection';
import { TableMap } from '../table-map';
import { selectionCell } from '../utils/selection-cell';
import { tableNodeTypes } from '../utils/table-node-types';
import { isInTable } from '../utils/tables';
import { clipCells, fitSlice, insertCells, pastedCells } from './copy-paste';
export function handlePaste(view, event, slice) {
  if (!isInTable(view.state)) {
    return false;
  }
  var cells = pastedCells(slice);
  var sel = view.state.selection;
  if (sel instanceof CellSelection) {
    if (!cells) {
      cells = {
        width: 1,
        height: 1,
        rows: [Fragment.from(fitSlice(tableNodeTypes(view.state.schema).cell, slice))]
      };
    }
    var table = sel.$anchorCell.node(-1);
    var start = sel.$anchorCell.start(-1);
    var tableMap = TableMap.get(table);
    var rect = tableMap.rectBetween(sel.$anchorCell.pos - start, sel.$headCell.pos - start);
    cells = clipCells(cells, rect.right - rect.left, rect.bottom - rect.top);
    insertCells(view.state, view.dispatch, start, rect, clearColumnWidthOfCells(cells, rect, tableMap));
    return true;
  }
  if (cells) {
    var $cell = selectionCell(sel);
    if (!$cell) {
      throw new Error("handlePaste: no cell found");
    }
    var _start = $cell.start(-1);
    var _rect = TableMap.get($cell.node(-1)).findCell($cell.pos - _start);
    var _tableMap = TableMap.get($cell.node(-1));
    insertCells(view.state, view.dispatch, _start, _rect, clearColumnWidthOfCells(cells, _rect, _tableMap));
    return true;
  }
  return false;
}

// Clear the pasted cells column widths so that it maintains
// the column widths of the destination table only if the pasted
// cells overlap with existing cells in the destination table.
// If the table grows on paste, keep the column widhts of the
// original table.
var clearColumnWidthOfCells = function clearColumnWidthOfCells(cells, rect, table) {
  var overlappingCells = [];
  var _iterator = _createForOfIteratorHelper(cells.rows),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var row = _step.value;
      var colNum = rect.left;
      for (var index = 0; index < row.childCount; index++) {
        var _cell = row.child(index);
        if (colNum + _cell.attrs.colspan <= table.width) {
          overlappingCells.push(_cell);
          colNum += _cell.attrs.colspan;
        } else {
          break;
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  for (var _i = 0, _overlappingCells = overlappingCells; _i < _overlappingCells.length; _i++) {
    var cell = _overlappingCells[_i];
    // TODO: ED-13910 unblock Prosemirror bump
    // @ts-ignore
    cell.attrs.colwidth = null;
  }
  return cells;
};