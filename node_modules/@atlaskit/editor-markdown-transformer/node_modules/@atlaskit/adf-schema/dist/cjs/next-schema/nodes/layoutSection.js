"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layoutSection = void 0;
var _adfSchemaGenerator = require("@atlaskit/adf-schema-generator");
var _breakout = require("../marks/breakout");
var _unsupportedMark = require("../marks/unsupportedMark");
var _unsupportedNodeAttribute = require("../marks/unsupportedNodeAttribute");
var _layoutColumn = require("./layoutColumn");
var _unsupportedBlock = require("./unsupportedBlock");
var layoutSection = exports.layoutSection = (0, _adfSchemaGenerator.adfNode)('layoutSection').define({
  isolating: true,
  marks: [_breakout.breakout, _unsupportedMark.unsupportedMark, _unsupportedNodeAttribute.unsupportedNodeAttribute],
  content: [(0, _adfSchemaGenerator.$or)(_layoutColumn.layoutColumn, _unsupportedBlock.unsupportedBlock)],
  DANGEROUS_MANUAL_OVERRIDE: {
    'pm-spec': {
      content: {
        value: '(layoutColumn | unsupportedBlock){1,3} unsupportedBlock* | unsupportedBlock+',
        reason: "The content expression is not correct or redundant around 'unsupportedBlock* | unsupportedBlock+'. This case is not supported by the DSL. Also in JSON schema there is no range for the items, so theres a mismatch between JSON and PM."
      }
    },
    'validator-spec': {
      'props.content.allowUnsupportedBlock': {
        remove: true,
        reason: '@DSLCompatibilityException - mismatch for layoutSection'
      }
    }
  }
}).variant('with_single_column', {
  stage0: true,
  content: [(0, _adfSchemaGenerator.$range)(1, 3, (0, _adfSchemaGenerator.$or)(_layoutColumn.layoutColumn, _unsupportedBlock.unsupportedBlock))],
  ignore: [],
  DANGEROUS_MANUAL_OVERRIDE: {
    'validator-spec': {
      'props.type': {
        value: {
          type: 'enum',
          values: ['layoutSection']
        },
        reason: '@DSLCompatibilityException - mismatch for layoutSection_with_single_column'
      },
      'props.marks': {
        value: {
          items: ['breakout'],
          optional: true,
          type: 'array'
        },
        reason: '@DSLCompatibilityException - mismatch for layoutSection_with_single_column'
      }
    }
  }
}).variant('full', {
  marks: [_breakout.breakout, _unsupportedMark.unsupportedMark, _unsupportedNodeAttribute.unsupportedNodeAttribute],
  content: [(0, _adfSchemaGenerator.$range)(2, 3, (0, _adfSchemaGenerator.$or)(_layoutColumn.layoutColumn, _unsupportedBlock.unsupportedBlock))],
  ignore: [],
  DANGEROUS_MANUAL_OVERRIDE: {
    'validator-spec': {
      'props.type': {
        value: {
          type: 'enum',
          values: ['layoutSection']
        },
        reason: '@DSLCompatibilityException - mismatch for layoutSection_full'
      }
    }
  }
});